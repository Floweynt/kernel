// vim: set ft=cpp:
#pragma once

#include <bits/utils.h>
#include <cstddef>
#include <cstring>

namespace std
{
    template <typename Char>
    class basic_string_view
    {
        constexpr static auto strlen(const Char* ptr) -> std::size_t
        {
            std::size_t ret = 0;
            while (*ptr++)
            {
                ret++;
            }
            return ret;
        }

    public:
        using CharType = Char;
        using value_type = Char;

        constexpr basic_string_view() : data_pointer{nullptr} {}
        constexpr basic_string_view(const Char* cs) : data_pointer{cs}, len{strlen(cs)} {}
        constexpr basic_string_view(const Char* s, std::size_t length) : data_pointer{s}, len{length} {}

        constexpr auto data() const -> const Char* { return data_pointer; }

        constexpr auto operator[](std::size_t index) const -> const Char& { return data_pointer[index]; }

        [[nodiscard]] constexpr auto size() const -> std::size_t { return len; }

        constexpr auto operator==(basic_string_view other) const -> bool
        {
            if (len != other.len)
            {
                return false;
            }
            for (std::size_t i = 0; i < len; i++)
            {
                if (data_pointer[i] != other.data_pointer[i])
                {
                    return false;
                }
            }
            return true;
        }

        constexpr std::size_t find_first(Char c, std::size_t start_from = 0) const
        {
            for (std::size_t i = start_from; i < len; i++)
            {
                if (data_pointer[i] == c)
                {
                    return i;
                }
            }

            return std::size_t(-1);
        }

        constexpr auto find_last(Char c) const -> std::size_t
        {
            for (std::size_t i = len; i > 0; i--)
            {
                if (data_pointer[i - 1] == c)
                {
                    return i - 1;
                }
            }

            return std::size_t(-1);
        }

        constexpr auto substr(std::size_t from, std::size_t size) const -> basic_string_view
        {
            __nostdlib_assert(from + size <= _length);
            return basic_string_view(data_pointer + from, size);
        }

        constexpr auto starts_with(basic_string_view other) -> bool
        {
            if (other.size() > size())
            {
                return false;
            }

            return substr(0, other.size()) == other;
        }

        constexpr auto ends_with(basic_string_view other) -> bool
        {
            if (other.size() > size())
            {
                return false;
            }

            return substr(size() - other.size(), other.size()) == other;
        }

    private:
        const Char* data_pointer;
        std::size_t len{};
    };

    using string_view = basic_string_view<char>;
} // namespace std
