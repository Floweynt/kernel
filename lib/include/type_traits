// vim:foldmethod=marker ft=cpp
#ifndef __NOTSTDLIB_TYPE_TRAITS_H__
#define __NOTSTDLIB_TYPE_TRAITS_H__
#include "../bits/type_traits/assignable.h"
#include "../bits/type_traits/compiler_specific.h"
#include "../bits/type_traits/constructible.h"
#include "../bits/type_traits/copy_assignable.h"
#include "../bits/type_traits/copy_constructible.h"
#include "../bits/type_traits/cv.h"
#include "../bits/type_traits/decay.h"
#include "../bits/type_traits/default_constructible.h"
#include "../bits/type_traits/destructible.h"
#include "../bits/type_traits/is_arithmetic.h"
#include "../bits/type_traits/is_array.h"
#include "../bits/type_traits/is_base_of.h"
#include "../bits/type_traits/is_bounded_array.h"
#include "../bits/type_traits/is_class.h"
#include "../bits/type_traits/is_compound.h"
#include "../bits/type_traits/is_convertible.h"
#include "../bits/type_traits/is_enum.h"
#include "../bits/type_traits/is_floating_point.h"
#include "../bits/type_traits/is_function.h"
#include "../bits/type_traits/is_fundamental.h"
#include "../bits/type_traits/is_integral.h"
#include "../bits/type_traits/is_member_function_pointer.h"
#include "../bits/type_traits/is_member_object_pointer.h"
#include "../bits/type_traits/is_member_pointer.h"
#include "../bits/type_traits/is_nullptr.h"
#include "../bits/type_traits/is_object.h"
#include "../bits/type_traits/is_polymorphic.h"
#include "../bits/type_traits/is_same.h"
#include "../bits/type_traits/is_scalar.h"
#include "../bits/type_traits/is_scoped_enum.h"
#include "../bits/type_traits/is_signed.h"
#include "../bits/type_traits/is_unbounded_array.h"
#include "../bits/type_traits/is_union.h"
#include "../bits/type_traits/is_unsigned.h"
#include "../bits/type_traits/is_void.h"
#include "../bits/type_traits/make_signed_unsigned.h"
#include "../bits/type_traits/move_assignable.h"
#include "../bits/type_traits/move_constructible.h"
#include "../bits/type_traits/pointer.h"
#include "../bits/type_traits/props.h"
#include "../bits/type_traits/ref.h"
#include "../bits/type_traits/remove_extents.h"
#include "../bits/type_traits/swappable.h"
#include "../bits/type_traits/utils.h"

namespace std
{
    template <std::size_t Size, std::size_t Align>
    struct alignas(Align) aligned_storage
    {
        constexpr aligned_storage() : buffer{0} {}

        char buffer[Size];
    };
} // namespace std

#endif
