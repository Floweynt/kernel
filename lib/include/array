// vim: set ft=cpp:
#pragma once
#include "../bits/iterator_utils.h"
#include "../bits/reverse_iterator.h"
#include "../bits/user_implement.h"
#include "cstddef"

namespace std
{
    namespace detail
    {
        template <typename T, size_t N>
        struct array_helper
        {
            using type = T[N];

            static constexpr auto ptr(const type& val, size_t index) noexcept -> T* { return &const_cast<decay_t<type>>(val)[index]; }
            static constexpr auto ref(const type& val, size_t index) noexcept -> T& { return const_cast<decay_t<type>>(val)[index]; }
        };

        template <typename T>
        struct array_helper<T, 0>
        {
            struct type
            {
            };
            static constexpr auto ptr(const type& /*val*/, size_t /*index*/) noexcept -> T* { return nullptr; }
            static constexpr auto ref(const type& val, size_t index) noexcept -> T& { return *ptr(val, index); }
        };
    } // namespace detail
    template <typename T, size_t N>
    struct array
    {
        using value_type = T;
        using size_type = size_t;
        using difference_type = ptrdiff_t;
        using reference = T&;
        using const_reference = const T&;
        using pointer = T*;
        using const_pointer = const T*;
        using iterator = detail::iterator_wrapper<pointer, array>;
        using const_iterator = detail::iterator_wrapper<const_pointer, array>;
        using reverse_iterator = std::reverse_iterator<iterator>;
        using const_reverse_iterator = std::reverse_iterator<const_iterator>;

        using _helper = detail::array_helper<T, N>;
        typename _helper::type _buf;

        constexpr auto at(size_type pos) -> reference
        {
            if (pos >= N)
            {
                detail::errors::__stdexcept_out_of_range();
            }
            return _helper::ref(_buf, pos);
        }

        constexpr auto at(size_type pos) const -> const_reference
        {
            if (pos >= N)
            {
                detail::errors::__stdexcept_out_of_range();
            }
            return _helper::ref(_buf, pos);
        }

        constexpr auto operator[](size_type pos) noexcept -> reference { return _helper::ref(_buf, pos); }

        constexpr auto operator[](size_type pos) const noexcept -> const_reference { return _helper::ref(_buf, pos); }

        constexpr auto front() noexcept -> reference { return _helper::ref(_buf, 0); }
        constexpr auto front() const noexcept -> const_reference { return _helper::ref(_buf, 0); }

        constexpr auto back() noexcept -> reference { return _helper::ref(_buf, N - 1); }
        constexpr auto back() const noexcept -> const_reference { return _helper::ref(_buf, N - 1); }

        constexpr auto data() noexcept -> pointer { return _helper::ptr(_buf, 0); }
        constexpr auto data() const noexcept -> const_pointer { return _helper::ptr(_buf, 0); }

        constexpr auto begin() noexcept -> iterator { return iterator(_helper::ptr(_buf, 0)); }
        constexpr auto end() noexcept -> iterator { return iterator(_helper::ptr(_buf, N - 1)); }

        constexpr auto cbegin() const noexcept -> const_iterator { return iterator(_helper::ptr(_buf, 0)); }
        constexpr auto cend() const noexcept -> const_iterator { return iterator(_helper::ptr(_buf, N - 1)); }

        constexpr auto rbegin() noexcept -> reverse_iterator { return reverse_iterator(end()); }
        constexpr auto rend() noexcept -> reverse_iterator { return reverse_iterator(begin()); }

        constexpr auto crbegin() const noexcept -> const_reverse_iterator { return const_reverse_iterator(cend()); }
        constexpr auto crend() const noexcept -> const_reverse_iterator { return const_reverse_iterator(cbegin()); }

        [[nodiscard]] constexpr auto empty() const noexcept -> bool { return N == 0; }
        [[nodiscard]] constexpr auto size() const noexcept -> size_type { return N; }
        [[nodiscard]] constexpr auto max_size() const noexcept -> size_type { return (size_type)-1; }

        void fill(const T& value)
        {
            for (auto& val : *this)
            {
                val = value;
            }
        }

        void swap(array& other) noexcept(is_nothrow_swappable_v<T>)
        {
            for (size_type i = 0; i < N; i++)
            {
                swap(_buf[i], other.buf[i]);
            }
        }
    };

    template <typename T, size_t N>
    auto operator==(const array<T, N>& lhs, const array<T, N>& rhs) -> bool
    {
        for (size_t i = 0; i < N; i++)
        {
            if (lhs[i] != rhs[i])
            {
                return false;
            }
        }

        return true;
    }

    template <typename T, size_t N>
    auto operator!=(const array<T, N>& lhs, const array<T, N>& rhs) -> bool
    {
        return !(lhs == rhs);
    }

    template <typename T, size_t N>
    auto operator<(const array<T, N>& lhs, const array<T, N>& rhs) -> bool
    {
        for (size_t i = 0; i < N; i++)
        {
            if (lhs[i] < rhs[i])
            {
                return true;
            }
            if (lhs[i] > rhs[i])
            {
                return false;
            }
        }

        return false;
    }

    template <typename T, size_t N>
    auto operator<=(const array<T, N>& lhs, const array<T, N>& rhs) -> bool
    {
        return (lhs < rhs) || (lhs == rhs);
    }

    template <typename T, size_t N>
    auto operator>(const array<T, N>& lhs, const array<T, N>& rhs) -> bool
    {
        return !(lhs <= rhs);
    }

    template <typename T, size_t N>
    auto operator>=(const array<T, N>& lhs, const array<T, N>& rhs) -> bool
    {
        return !(lhs < rhs);
    }

    template <typename T, size_t N>
    void swap(array<T, N>& lhs, array<T, N>& rhs) noexcept(noexcept(lhs.swap(rhs)))
    {
        lhs.swap(rhs);
    }

    template <size_t I, typename T, size_t N>
    constexpr auto get(array<T, N>& arr) noexcept -> T&
    {
        static_assert(I < N, "Index out-of-bounds");
        return arr[I];
    }

    template <size_t I, typename T, size_t N>
    constexpr auto get(array<T, N>&& arr) noexcept -> T&&
    {
        static_assert(I < N, "Index out-of-bounds");
        return arr[I];
    }

    template <size_t I, typename T, size_t N>
    constexpr auto get(const array<T, N>& arr) noexcept -> const T&
    {
        static_assert(I < N, "Index out-of-bounds");
        return arr[I];
    }

    template <size_t I, typename T, size_t N>
    constexpr auto get(const array<T, N>&& arr) noexcept -> const T&&
    {
        static_assert(I < N, "Index out-of-bounds");
        return arr[I];
    }

    template <class T, class... U>
    array(T, U...) -> array<T, 1 + sizeof...(U)>;
} // namespace std
