// vim: set ft=cpp:
#pragma once

namespace std
{

    enum class memory_order : int
    {
        relaxed = __ATOMIC_RELAXED,
        consume = __ATOMIC_CONSUME,
        acquire = __ATOMIC_ACQUIRE,
        release = __ATOMIC_RELEASE,
        acq_rel = __ATOMIC_ACQ_REL,
        seq_cst = __ATOMIC_SEQ_CST
    };

    constexpr memory_order memory_order_relaxed = memory_order::relaxed;
    constexpr memory_order memory_order_consume = memory_order::consume;
    constexpr memory_order memory_order_acquire = memory_order::acquire;
    constexpr memory_order memory_order_release = memory_order::release;
    constexpr memory_order memory_order_acq_rel = memory_order::acq_rel;
    constexpr memory_order memory_order_seq_cst = memory_order::seq_cst;

    template <typename T>
    class atomic
    {
        T val;

    public:
        atomic() noexcept : val(){};
        constexpr atomic(T desired) noexcept : val(desired){};
        atomic(const atomic&) = delete;

        auto operator=(T desired) noexcept -> T
        {
            store(desired);
            return desired;
        }

        auto operator=(T desired) volatile noexcept -> T
        {
            store(desired);
            return desired;
        }

        auto operator=(const atomic&) volatile -> atomic& = delete;

        [[nodiscard]] auto is_lock_free() const volatile noexcept -> bool { return true; }

        void store(T desired, memory_order order = memory_order_seq_cst) noexcept { __atomic_store(&val, &desired, (int)order); }

        void store(T desired, memory_order order = memory_order_seq_cst) volatile noexcept { __atomic_store(&val, &desired, (int)order); }

        auto load(memory_order order = memory_order_seq_cst) const noexcept -> T
        {
            T tmp;
            __atomic_load(&val, &tmp, (int)order);
            return tmp;
        }

        auto load(memory_order order = memory_order_seq_cst) const volatile noexcept -> T
        {
            T tmp;
            __atomic_load(&val, &tmp, (int)order);
            return tmp;
        }

        operator T() const noexcept { return load(); }
        operator T() const volatile noexcept { return load(); }

        auto exchange(T desired, memory_order order = memory_order_seq_cst) noexcept -> T
        {
            T ret;
            __atomic_exchange(&val, &desired, &ret, (int)order);
            return ret;
        }

        auto exchange(T desired, memory_order order = memory_order_seq_cst) volatile noexcept -> T
        {
            T ret;
            __atomic_exchange(&val, &desired, &ret, (int)order);
            return ret;
        }

        auto compare_exchange_weak(T& expected, T desired, memory_order success, memory_order failure) noexcept -> bool
        {
            return __atomic_compare_exchange(&val, &expected, &desired, true, (int)success, (int)failure);
        }

        auto compare_exchange_weak(T& expected, T desired, memory_order order = memory_order_seq_cst) noexcept -> bool
        {
            return compare_exchange_weak(expected, desired, order, order);
        }

        auto compare_exchange_weak(T& expected, T desired, memory_order success, memory_order failure) volatile noexcept -> bool
        {
            return __atomic_compare_exchange(&val, &expected, &desired, true, (int)success, (int)failure);
        }

        auto compare_exchange_weak(T& expected, T desired, memory_order order = memory_order_seq_cst) volatile noexcept -> bool
        {
            return compare_exchange_weak(expected, desired, order, order);
        }

        auto compare_exchange_strong(T& expected, T desired, memory_order success, memory_order failure) noexcept -> bool
        {
            return __atomic_compare_exchange(&val, &expected, &desired, false, (int)success, (int)failure);
        }

        auto compare_exchange_strong(T& expected, T desired, memory_order order = memory_order_seq_cst) noexcept -> bool
        {
            return compare_exchange_strong(expected, desired, order, order);
        }

        auto compare_exchange_strong(T& expected, T desired, memory_order success, memory_order failure) volatile noexcept -> bool
        {
            return __atomic_compare_exchange(&val, &expected, &desired, false, (int)success, (int)failure);
        }

        auto compare_exchange_strong(T& expected, T desired, memory_order order = memory_order_seq_cst) volatile noexcept -> bool
        {
            return compare_exchange_strong(expected, desired, order, order);
        }

        auto fetch_add(T arg, memory_order order = memory_order_seq_cst) noexcept -> T { return __atomic_fetch_add(&val, arg, (int)order); }

        auto fetch_add(T arg, memory_order order = memory_order_seq_cst) volatile noexcept -> T { return __atomic_fetch_add(&val, arg, (int)order); }

        auto fetch_sub(T arg, memory_order order = memory_order_seq_cst) noexcept -> T { return __atomic_fetch_sub(&val, arg, (int)order); }

        auto fetch_sub(T arg, memory_order order = memory_order_seq_cst) volatile noexcept -> T { return __atomic_fetch_sub(&val, arg, (int)order); }

        auto fetch_and(T arg, memory_order order = memory_order_seq_cst) noexcept -> T { return __atomic_fetch_and(&val, arg, (int)order); }

        auto fetch_and(T arg, memory_order order = memory_order_seq_cst) volatile noexcept -> T { return __atomic_fetch_and(&val, arg, (int)order); }

        auto fetch_or(T arg, memory_order order = memory_order_seq_cst) noexcept -> T { return __atomic_fetch_or(&val, arg, (int)order); }

        auto fetch_or(T arg, memory_order order = memory_order_seq_cst) volatile noexcept -> T { return __atomic_fetch_or(&val, arg, (int)order); }

        auto fetch_xor(T arg, memory_order order = memory_order_seq_cst) noexcept -> T { return __atomic_fetch_xor(&val, arg, (int)order); }

        auto fetch_xor(T arg, memory_order order = memory_order_seq_cst) volatile noexcept -> T { return __atomic_fetch_xor(&val, arg, (int)order); }

        auto operator+=(T arg) noexcept -> T { return fetch_add(arg) + arg; }
        auto operator+=(T arg) volatile noexcept -> T { return fetch_add(arg) + arg; }
        auto operator-=(T arg) noexcept -> T { return fetch_sub(arg) - arg; }
        auto operator-=(T arg) volatile noexcept -> T { return fetch_sub(arg) - arg; }
        auto operator&=(T arg) noexcept -> T { return fetch_and(arg) & arg; }
        auto operator&=(T arg) volatile noexcept -> T { return fetch_and(arg) & arg; }
        auto operator|=(T arg) noexcept -> T { return fetch_or(arg) | arg; }
        auto operator|=(T arg) volatile noexcept -> T { return fetch_or(arg) | arg; }
        auto operator^=(T arg) noexcept -> T { return fetch_xor(arg) ^ arg; }
        auto operator^=(T arg) volatile noexcept -> T { return fetch_xor(arg) ^ arg; }
    };

    template <typename T>
    void atomic_store(atomic<T>* obj, typename atomic<T>::value_type desr) noexcept
    {
        obj->store(desr);
    }

    template <typename T>
    void atomic_store(volatile atomic<T>* obj, typename atomic<T>::value_type desr) noexcept
    {
        obj->store(desr);
    }

    template <typename T>
    void atomic_store_explicit(atomic<T>* obj, typename atomic<T>::value_type desr, memory_order order) noexcept
    {
        obj->store(desr, order);
    }

    template <typename T>
    void atomic_store_explicit(volatile atomic<T>* obj, typename atomic<T>::value_type desr, memory_order order) noexcept
    {
        obj->store(desr, order);
    }

    template <typename T>
    auto atomic_load(atomic<T>* obj) noexcept -> T
    {
        return obj->load();
    }

    template <typename T>
    auto atomic_load(volatile atomic<T>* obj) noexcept -> T
    {
        return obj->load();
    }

    template <typename T>
    auto atomic_load_explicit(atomic<T>* obj, memory_order order) noexcept -> T
    {
        return obj->load(order);
    }

    template <typename T>
    auto atomic_load_explicit(volatile atomic<T>* obj, memory_order order) noexcept -> T
    {
        return obj->load(order);
    }

    template <typename T>
    auto atomic_exchange(atomic<T>* obj, typename atomic<T>::value_type desr) noexcept -> T
    {
        return obj->exchange(desr);
    }

    template <typename T>
    auto atomic_exchange(volatile atomic<T>* obj, typename atomic<T>::value_type desr) noexcept -> T
    {
        return obj->exchange(desr);
    }

    template <typename T>
    auto atomic_exchange_explicit(atomic<T>* obj, typename atomic<T>::value_type desr, memory_order order) noexcept -> T
    {
        return obj->exchange(desr, order);
    }

    template <typename T>
    auto atomic_exchange_explicit(volatile atomic<T>* obj, typename atomic<T>::value_type desr, memory_order order) noexcept -> T
    {
        return obj->exchange(desr, order);
    }

    template <typename T>
    auto atomic_compare_exchange_weak(atomic<T>* obj, typename atomic<T>::value_type* expected, typename atomic<T>::value_type desired) noexcept
        -> bool
    {
        return obj->compare_exchange_weak(*expected, desired);
    }

    template <typename T>
    auto atomic_compare_exchange_weak(volatile atomic<T>* obj, typename atomic<T>::value_type* expected,
                                      typename atomic<T>::value_type desired) noexcept -> bool
    {
        return obj->compare_exchange_weak(*expected, desired);
    }

    template <typename T>
    auto atomic_compare_exchange_strong(atomic<T>* obj, typename atomic<T>::value_type* expected, typename atomic<T>::value_type desired) noexcept
        -> bool
    {
        return obj->compare_exchange_strong(*expected, desired);
    }

    template <typename T>
    auto atomic_compare_exchange_strong(volatile atomic<T>* obj, typename atomic<T>::value_type* expected,
                                        typename atomic<T>::value_type desired) noexcept -> bool
    {
        return obj->compare_exchange_strong(*expected, desired);
    }

    template <typename T>
    auto atomic_compare_exchange_weak_explicit(atomic<T>* obj, typename atomic<T>::value_type* expected, typename atomic<T>::value_type desired,
                                               memory_order succ, memory_order fail) noexcept -> bool
    {
        return obj->compare_exchange_weak(*expected, desired, succ, fail);
    }

    template <typename T>
    auto atomic_compare_exchange_weak_explicit(volatile atomic<T>* obj, typename atomic<T>::value_type* expected,
                                               typename atomic<T>::value_type desired, memory_order succ, memory_order fail) noexcept -> bool
    {
        return obj->compare_exchange_weak(*expected, desired, succ, fail);
    }

    template <typename T>
    auto atomic_compare_exchange_strong_explicit(atomic<T>* obj, typename atomic<T>::value_type* expected, typename atomic<T>::value_type desired,
                                                 memory_order succ, memory_order fail) noexcept -> bool
    {
        return obj->compare_exchange_strong(*expected, desired, succ, fail);
    }

    template <typename T>
    auto atomic_compare_exchange_strong_explicit(volatile atomic<T>* obj, typename atomic<T>::value_type* expected,
                                                 typename atomic<T>::value_type desired, memory_order succ, memory_order fail) noexcept -> bool
    {
        return obj->compare_exchange_strong(*expected, desired, succ, fail);
    }

    template <typename T>
    auto atomic_fetch_add(atomic<T>* obj, typename atomic<T>::difference_type arg) noexcept -> T
    {
        return obj->fetch_add(arg);
    }

    template <typename T>
    auto atomic_fetch_add(volatile atomic<T>* obj, typename atomic<T>::difference_type arg) noexcept -> T
    {
        return obj->fetch_add(arg);
    }

    template <typename T>
    auto atomic_fetch_add_explicit(atomic<T>* obj, typename atomic<T>::difference_type arg, memory_order order) noexcept -> T
    {
        return obj->fetch_add(arg, order);
    }

    template <typename T>
    auto atomic_fetch_add_explicit(volatile atomic<T>* obj, typename atomic<T>::difference_type arg, memory_order order) noexcept -> T
    {
        return obj->fetch_add(arg, order);
    }

    template <typename T>
    auto atomic_fetch_and(atomic<T>* obj, typename atomic<T>::difference_type arg) noexcept -> T
    {
        return obj->fetch_and(arg);
    }

    template <typename T>
    auto atomic_fetch_and(volatile atomic<T>* obj, typename atomic<T>::difference_type arg) noexcept -> T
    {
        return obj->fetch_and(arg);
    }

    template <typename T>
    auto atomic_fetch_and_explicit(atomic<T>* obj, typename atomic<T>::difference_type arg, memory_order order) noexcept -> T
    {
        return obj->fetch_and(arg, order);
    }

    template <typename T>
    auto atomic_fetch_and_explicit(volatile atomic<T>* obj, typename atomic<T>::difference_type arg, memory_order order) noexcept -> T
    {
        return obj->fetch_and(arg, order);
    }

    template <typename T>
    auto atomic_fetch_or(atomic<T>* obj, typename atomic<T>::difference_type arg) noexcept -> T
    {
        return obj->fetch_or(arg);
    }

    template <typename T>
    auto atomic_fetch_or(volatile atomic<T>* obj, typename atomic<T>::difference_type arg) noexcept -> T
    {
        return obj->fetch_or(arg);
    }

    template <typename T>
    auto atomic_fetch_or_explicit(atomic<T>* obj, typename atomic<T>::difference_type arg, memory_order order) noexcept -> T
    {
        return obj->fetch_or(arg, order);
    }

    template <typename T>
    auto atomic_fetch_or_explicit(volatile atomic<T>* obj, typename atomic<T>::difference_type arg, memory_order order) noexcept -> T
    {
        return obj->fetch_or(arg, order);
    }

    template <typename T>
    auto atomic_fetch_xor(atomic<T>* obj, typename atomic<T>::difference_type arg) noexcept -> T
    {
        return obj->fetch_xor(arg);
    }

    template <typename T>
    auto atomic_fetch_xor(volatile atomic<T>* obj, typename atomic<T>::difference_type arg) noexcept -> T
    {
        return obj->fetch_xor(arg);
    }

    template <typename T>
    auto atomic_fetch_xor_explicit(atomic<T>* obj, typename atomic<T>::difference_type arg, memory_order order) noexcept -> T
    {
        return obj->fetch_xor(arg, order);
    }

    template <typename T>
    auto atomic_fetch_xor_explicit(volatile atomic<T>* obj, typename atomic<T>::difference_type arg, memory_order order) noexcept -> T
    {
        return obj->fetch_xor(arg, order);
    }

    struct atomic_flag
    {
        constexpr atomic_flag() noexcept : flag() {}

        atomic_flag(const atomic_flag&) = delete;
        auto operator=(const atomic_flag&) -> atomic_flag& = delete;
        auto operator=(const atomic_flag&) volatile -> atomic_flag& = delete;

        inline void clear(memory_order order = memory_order_seq_cst) noexcept { __atomic_clear(&flag, (int)order); }
        inline void clear(memory_order order = memory_order_seq_cst) volatile noexcept { __atomic_clear(&flag, (int)order); }

        inline auto test_and_set(memory_order order = memory_order_seq_cst) noexcept -> bool { return __atomic_test_and_set(&flag, (int)order); }

        inline auto test_and_set(memory_order order = memory_order_seq_cst) volatile noexcept -> bool
        {
            return __atomic_test_and_set(&flag, (int)order);
        }

        [[nodiscard]] inline bool test(memory_order order = memory_order_seq_cst) const noexcept { return __atomic_load_n(&flag, (int)order); }

        [[nodiscard]] inline bool test(memory_order order = memory_order_seq_cst) const volatile noexcept
        {
            return __atomic_load_n(&flag, (int)order);
        }

    private:
        unsigned char flag;
    };

    inline auto atomic_flagtest_and_set(atomic_flag* flag) noexcept -> bool { return flag->test_and_set(); }
    inline auto atomic_flagtest_and_set(volatile atomic_flag* flag) noexcept -> bool { return flag->test_and_set(); }

    inline auto atomic_flagtest_and_set_explicit(atomic_flag* flag, memory_order order) noexcept -> bool { return flag->test_and_set(order); }

    inline auto atomic_flagtest_and_set_explicit(volatile atomic_flag* flag, memory_order order) noexcept -> bool
    {
        return flag->test_and_set(order);
    }

    inline void atomic_flagclear(atomic_flag* flag) noexcept { flag->clear(); }
    inline void atomic_flagclear(volatile atomic_flag* flag) noexcept { flag->clear(); }
    inline void atomic_flagclear_explicit(atomic_flag* flag, memory_order order) noexcept { flag->clear(order); }
    inline void atomic_flagclear_explicit(volatile atomic_flag* flag, memory_order order) noexcept { flag->clear(order); }
    inline auto atomic_flagtest(atomic_flag* flag) noexcept -> bool { return flag->test(); }
    inline auto atomic_flagtest(volatile atomic_flag* flag) noexcept -> bool { return flag->test(); }
    inline auto atomic_flagtest_explicit(atomic_flag* flag, memory_order order) noexcept -> bool { return flag->test(order); }
    inline auto atomic_flagtest_explicit(volatile atomic_flag* flag, memory_order order) noexcept -> bool { return flag->test(order); }

    // direct atomics
    template <typename T>
    auto direct_atomic_load_n(volatile T* ptr, std::memory_order order)
    {
        return __atomic_load_n(ptr, (int)order);
    }

    template <typename T>
    void direct_atomic_load(volatile T* ptr, volatile T* ret, std::memory_order order)
    {
        __atomic_load(ptr, ret, (int)order);
    }

    template <typename T>
    void direct_atomic_store_n(volatile T* ptr, T val, std::memory_order order)
    {
        __atomic_store_n(ptr, val, (int)order);
    }

    template <typename T>
    void direct_atomic_store(volatile T* ptr, volatile T* val, std::memory_order order)
    {
        __atomic_store(ptr, val, (int)order);
    }

    template <typename T>
    auto direct_atomic_exchange_n(volatile T* ptr, T val, std::memory_order order)
    {
        return __atomic_exchange_n(ptr, val, (int)order);
    }

    template <typename T>
    auto direct_atomic_exchange(volatile T* ptr, volatile T* val, volatile T* ret, std::memory_order order)
    {
        return __atomic_exchange(ptr, val, ret, (int)order);
    }

    template <typename T>
    auto direct_atomic_compare_exchange_n(volatile T* ptr, volatile T* expected, T desired, bool weak, std::memory_order success_memorder,
                                          std::memory_order failure_memorder) -> bool
    {
        return __atomic_compare_exchange_n(ptr, expected, desired, weak, (int)success_memorder, (int)failure_memorder);
    }

    template <typename T>
    auto direct_atomic_compare_exchange(volatile T* ptr, volatile T* expected, volatile T* desired, bool weak, std::memory_order success_memorder,
                                          std::memory_order failure_memorder) -> bool
    {
        return __atomic_compare_exchange(ptr, expected, desired, weak, (int)success_memorder, (int)failure_memorder);
    }
} // namespace std
