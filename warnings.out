../kernel/src/arch/x86/idt/idt.cpp:10:13: warning: variable 'idt_entry_start' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
extern char idt_entry_start[];
            ^
../kernel/src/arch/x86/idt/idt.cpp:29:13: warning: variable 'handler' of type 'std::uint64_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::uint64_t handler = as_uptr(decay_arr(idt_entry_start)) + i * IDT_HANDLER_ASM_SIZE;
            ^
                          const 
../kernel/src/arch/x86/idt/idt.cpp:38:9: warning: variable 'desc' of type 'utils::packed_tuple<std::uint16_t, std::uintptr_t>' (aka 'packed_tuple<unsigned short, unsigned long>') can be declared 'const' [misc-const-correctness]
        utils::packed_tuple<std::uint16_t, std::uintptr_t> desc(sizeof(idt_entry) * IDT_ENTRIES, as_uptr(smp::core_local::get().idt_entries));
        ^
                                                           const 
../kernel/src/arch/x86/idt/idt.cpp:57:9: warning: variable 'num' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t num = local.irq_allocator.allocate();
        ^
                    const 
../kernel/src/arch/x86/debug/symbols.cpp:32:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            entry* entries = as_ptr(ptr + 1);
                                        ^
../kernel/src/arch/x86/debug/symbols.cpp:41:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                if (entries[mid].start_addr > address)
                    ^
../kernel/src/arch/x86/debug/symbols.cpp:51:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            if (entries[left].start_addr + entries[left].len > address)
                ^
../kernel/src/arch/x86/debug/symbols.cpp:51:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            if (entries[left].start_addr + entries[left].len > address)
                                           ^
../kernel/src/arch/x86/debug/symbols.cpp:53:65: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                return debug::symbol{as_ptr<const char>(symtab) + entries[left].name, static_cast<std::uint32_t>(address - entries[left].start_addr)};
                                                                ^
../kernel/src/arch/x86/debug/symbols.cpp:53:67: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                return debug::symbol{as_ptr<const char>(symtab) + entries[left].name, static_cast<std::uint32_t>(address - entries[left].start_addr)};
                                                                  ^
../kernel/src/arch/x86/debug/symbols.cpp:53:124: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                return debug::symbol{as_ptr<const char>(symtab) + entries[left].name, static_cast<std::uint32_t>(address - entries[left].start_addr)};
                                                                                                                           ^
../kernel/src/arch/x86/sync/spinlock.cpp:13:33: warning: narrowing conversion from 'std::size_t' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                if (!l.exchange(value, std::memory_order_acquire))
                                ^
../kernel/src/arch/x86/debug/panic.cpp:31:13: warning: variable 'old_bp' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::size_t old_bp = base_ptr[0];
            ^
                        const 
../kernel/src/arch/x86/debug/panic.cpp:31:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            std::size_t old_bp = base_ptr[0];
                                 ^
../kernel/src/arch/x86/debug/panic.cpp:32:13: warning: variable 'ret_addr' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::size_t ret_addr = base_ptr[1];
            ^
                        const 
../kernel/src/arch/x86/debug/panic.cpp:32:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            std::size_t ret_addr = base_ptr[1];
                                   ^
../kernel/src/arch/x86/debug/panic.cpp:49:87: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        klog::log("stack type: " CYAN("%s") "\n", stack_color < sizeof(STACK_TYPES) ? STACK_TYPES[stack_color] : "unknown");
                                                                                      ^
../kernel/src/arch/x86/debug/panic.cpp:64:37: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        for (std::size_t i = 0; i < 5; i++)
                                    ^
../kernel/src/arch/x86/debug/panic.cpp:66:71: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
            klog::log("%3s=0x%016lx   %3s=0x%016lx   %3s=0x%016lx\n", proc::context::REGISTER_NAMES[i * 3], ctx->rgp[i * 3],
                                                                      ^
../kernel/src/arch/x86/debug/panic.cpp:66:109: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
            klog::log("%3s=0x%016lx   %3s=0x%016lx   %3s=0x%016lx\n", proc::context::REGISTER_NAMES[i * 3], ctx->rgp[i * 3],
                                                                                                            ^
../kernel/src/arch/x86/debug/panic.cpp:67:23: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                      proc::context::REGISTER_NAMES[i * 3 + 1], ctx->rgp[i * 3 + 1], proc::context::REGISTER_NAMES[i * 3 + 2], ctx->rgp[i * 3 + 2]);
                      ^
../kernel/src/arch/x86/debug/panic.cpp:67:65: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                      proc::context::REGISTER_NAMES[i * 3 + 1], ctx->rgp[i * 3 + 1], proc::context::REGISTER_NAMES[i * 3 + 2], ctx->rgp[i * 3 + 2]);
                                                                ^
../kernel/src/arch/x86/debug/panic.cpp:67:86: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                      proc::context::REGISTER_NAMES[i * 3 + 1], ctx->rgp[i * 3 + 1], proc::context::REGISTER_NAMES[i * 3 + 2], ctx->rgp[i * 3 + 2]);
                                                                                     ^
../kernel/src/arch/x86/debug/panic.cpp:67:128: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                      proc::context::REGISTER_NAMES[i * 3 + 1], ctx->rgp[i * 3 + 1], proc::context::REGISTER_NAMES[i * 3 + 2], ctx->rgp[i * 3 + 2]);
                                                                                                                               ^
../kernel/src/arch/x86/apic/apic.cpp:27:39: warning: 0xff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        outb(ioports::PIC_SLAVE_DATA, 0xff);
                                      ^
../kernel/src/arch/x86/apic/apic.cpp:28:40: warning: 0xff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        outb(ioports::PIC_MASTER_DATA, 0xff);
                                       ^
../kernel/src/arch/x86/apic/apic.cpp:41:45: warning: 0b00110000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            outb(ioports::PIT_MODE_COMMAND, 0b00110000);
                                            ^
../kernel/src/arch/x86/apic/apic.cpp:85:9: warning: variable 'ticks' of type 'std::uint64_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uint64_t ticks = ~0U - mmio_register().current_timer_count;
        ^
                      const 
../kernel/src/arch/x86/kinit/kinit.cpp:50:36: warning: variable 'buf' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
alignas(boot_resource) static char buf[sizeof(boot_resource)];
                                   ^
../kernel/src/arch/x86/kinit/kinit.cpp:50:36: warning: variable 'buf' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/kinit/kinit.cpp:52:82: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
auto boot_resource::instance() -> boot_resource& { return *as_ptr<boot_resource>(buf); }
                                                                                 ^
../kernel/src/arch/x86/kinit/kinit.cpp:56:33: warning: Access to field 'module_count' results in a dereference of a null pointer (loaded from field 'response') [clang-analyzer-core.NullDereference]
    for (std::size_t i = 0; i < module_request.response->module_count; i++)
                                ^
../kernel/src/arch/x86/kinit/kinit.cpp:139:19: note: Calling default constructor for 'boot_resource'
        new (buf) boot_resource();
                  ^~~~~~~~~~~~~~~
../kernel/src/arch/x86/kinit/kinit.cpp:65:16: note: Calling default constructor for 'modules'
boot_resource::boot_resource() : mmap_length(0), pmrs_length(0), mmap_entries(), smp_status(false)
               ^~~~~~~~~~~~~
../kernel/src/arch/x86/kinit/kinit.cpp:56:33: note: Access to field 'module_count' results in a dereference of a null pointer (loaded from field 'response')
    for (std::size_t i = 0; i < module_request.response->module_count; i++)
                                ^              ~~~~~~~~
../kernel/src/arch/x86/kinit/kinit.cpp:58:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        if (!std::strcmp(module_request.response->modules[i]->cmdline, "symbols"))
                         ^
../kernel/src/arch/x86/kinit/kinit.cpp:60:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            symbols = module_request.response->modules[i]->address;
                      ^
../kernel/src/arch/x86/kinit/kinit.cpp:78:9: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        mmap_entries[i] = *mmap_tag->entries[i];
        ^
../kernel/src/arch/x86/kinit/kinit.cpp:78:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        mmap_entries[i] = *mmap_tag->entries[i];
                           ^
../kernel/src/arch/x86/kinit/kinit.cpp:92:21: warning: variable 'cpu0' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    smp::core_local cpu0;
                    ^
../kernel/src/arch/x86/kinit/kinit.cpp:93:22: warning: variable 'cpu0_ptr' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    smp::core_local* cpu0_ptr = &cpu0;
                     ^
../kernel/src/arch/x86/kinit/kinit.cpp:93:22: warning: variable 'cpu0_ptr' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
../kernel/src/arch/x86/kinit/kinit.cpp:98:9: warning: variable 'instance' of type 'boot_resource &' can be declared 'const' [misc-const-correctness]
        boot_resource& instance = boot_resource::instance();
        ^
                      const
../kernel/src/arch/x86/kinit/kinit.cpp:101:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("WARN kinit: ");
            ^
../kernel/src/arch/x86/kinit/kinit.cpp:106:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("%s", flag.second); // input is sanitized
                    ^
../kernel/src/arch/x86/kinit/kinit.cpp:110:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("\n");
            ^
../kernel/src/arch/x86/kinit/kinit.cpp:117:26: warning: declaration uses identifier '__start_init_array', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
    extern std::uint64_t __start_init_array[];
                         ^~~~~~~~~~~~~~~~~~
                         _start_init_array
../kernel/src/arch/x86/kinit/kinit.cpp:117:26: warning: variable '__start_init_array' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
../kernel/src/arch/x86/kinit/kinit.cpp:118:26: warning: declaration uses identifier '__end_init_array', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
    extern std::uint64_t __end_init_array[];
                         ^~~~~~~~~~~~~~~~
                         _end_init_array
../kernel/src/arch/x86/kinit/kinit.cpp:118:26: warning: variable '__end_init_array' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
../kernel/src/arch/x86/kinit/kinit.cpp:126:99: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            for (std::uintptr_t* i = as_ptr(&__start_init_array); i < as_ptr(&__end_init_array); i++)
                                                                                                  ^
../kernel/src/arch/x86/kinit/kinit.cpp:139:14: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        new (buf) boot_resource();
             ^
../kernel/src/arch/x86/kinit/kinit.cpp:149:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::printf("kinit: _start() started tty\n");
        ^
../kernel/src/arch/x86/kinit/kinit.cpp:150:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::printf("booted from: %s-v%s\n", btl_info_request.response->name, btl_info_request.response->version);
        ^
../kernel/src/arch/x86/san/ubsan.cpp:119:5: warning: variable '__guard0' of type '::lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
    SPINLOCK_SYNC_BLOCK;
    ^
../kernel/include/arch/x86/sync/spinlock.h:56:29: note: expanded from macro 'SPINLOCK_SYNC_BLOCK'
#define SPINLOCK_SYNC_BLOCK _SPINLOCK_SYNC_BLOCK(__COUNTER__)
                            ^
../kernel/include/arch/x86/sync/spinlock.h:54:5: note: expanded from macro '_SPINLOCK_SYNC_BLOCK'
    ::lock::spinlock_guard CONCAT(__guard, n) { CONCAT(__lock, n) }
    ^
../kernel/src/arch/x86/san/ubsan.cpp:138:9: warning: variable 'lhs_typed' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value lhs_typed(*data->type, lhs);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:139:9: warning: variable 'rhs_typed' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value rhs_typed(*data->type, rhs);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:179:9: warning: variable 'lhs_typed' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value lhs_typed(*data->type, lhs);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:180:9: warning: variable 'rhs_typed' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value rhs_typed(*data->type, rhs);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:201:9: warning: variable 'val_typed' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value val_typed(*data->type, val);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:272:9: warning: variable 'lhs_value' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value lhs_value(*data->lhs_type, lhs);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:273:9: warning: variable 'rhs_value' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value rhs_value(*data->rhs_type, rhs);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:340:9: warning: variable 'index' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value index(*data->index, val);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:369:9: warning: variable 'alignment' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uintptr_t alignment = (std::uintptr_t)1 << data->log_alignment;
        ^
                       const 
../kernel/src/arch/x86/san/ubsan.cpp:413:9: warning: variable 'value' of type 'ubsan_typed_value' can be declared 'const' [misc-const-correctness]
        ubsan_typed_value value(*data->type, val);
        ^
                          const 
../kernel/src/arch/x86/san/ubsan.cpp:516:104: warning: 2 adjacent parameters of '__ubsan_handle_alignment_assumption' of similar type ('value') are easily swapped by mistake [bugprone-easily-swappable-parameters]
    C [[noreturn]] NO_UBSAN void __ubsan_handle_alignment_assumption(ubsan_alignment_assumption* data, value ptr, value align, value off)
                                                                                                       ^~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/san/ubsan.cpp:516:110: note: the first parameter in the range is 'ptr'
    C [[noreturn]] NO_UBSAN void __ubsan_handle_alignment_assumption(ubsan_alignment_assumption* data, value ptr, value align, value off)
                                                                                                             ^~~
../kernel/src/arch/x86/san/ubsan.cpp:516:121: note: the last parameter in the range is 'align'
    C [[noreturn]] NO_UBSAN void __ubsan_handle_alignment_assumption(ubsan_alignment_assumption* data, value ptr, value align, value off)
                                                                                                                        ^~~~~
../kernel/src/arch/x86/san/ubsan.cpp:520:9: warning: variable 'real_ptr' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uintptr_t real_ptr = ptr - off;
        ^
                       const 
../kernel/src/arch/x86/san/ubsan.cpp:521:9: warning: variable 'real_align' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uintptr_t real_align = std::uintptr_t(1) << __builtin_ctzl(real_ptr);
        ^
                       const 
../kernel/src/arch/x86/san/ubsan.cpp:523:9: warning: variable 'align_mask' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uintptr_t align_mask = align - 1;
        ^
                       const 
../kernel/src/arch/x86/san/ubsan.cpp:524:9: warning: variable 'misalign_off' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uintptr_t misalign_off = real_ptr & align_mask;
        ^
                       const 
../kernel/src/arch/x86/debug/kinit_dump.cpp:15:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::printf("kernel v%s (%s)\n", config::get_str<"version.full-version">, config::get_str<"arch">);
        ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:16:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::printf("built with cc: %s-%s cxx: %s-%s\n", config::get_str<"version.cc.id">, config::get_str<"version.cc.ver">,
        ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:24:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("memory map:\n");
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:30:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" CYAN("USABLE      ") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:33:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" RED("RESERVED    ") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:36:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" YELLOW("ACPI RECLAIM") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:39:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" YELLOW("ACPI NVS    ") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:42:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" RED("BAD         ") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:45:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" YELLOW("BTL RECLAIM ") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:48:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" CYAN("K/MOD       ") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:51:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" CYAN("FRAMEBUFFER ") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:55:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[" GRAY("UNKNOWN     ") "]: ");
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:57:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                std::printf("0x%016lx-0x%016lx length=0x%016lx\n", entry.base, entry.base + entry.length, entry.length);
                ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:66:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("cpu_vendor_string: %s\n", cpuid_info::cpu_vendor_string());
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:67:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("cpu_brand_string: %s\n", cpuid_info::cpu_brand_string());
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:69:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("cpu features: ");
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:74:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("%s ", cpuid_info::FEATURE_STRINGS.at(i));
                    ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:78:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("\n");
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:87:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("ACPI info (0x%016lx):\n", rsdp->xsdt_address);
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:88:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("  rsdp data:\n");
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:89:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("    revision=%d\n", (int)rsdp->revision);
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:90:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
            std::printf("    length=%d\n", (int)rsdp->length);
            ^
../kernel/src/arch/x86/debug/kinit_dump.cpp:94:17: warning: variable 'signature_ptr' of type 'std::span<const char>' can be declared 'const' [misc-const-correctness]
                std::span<const char> signature_ptr(cast_ptr<const char>(&signature), 4);
                ^
                                      const 
../kernel/src/arch/x86/debug/kinit_dump.cpp:96:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                std::printf("  entry: (sig=0x%08x '%c%c%c%c')\n", signature, signature_ptr[0], signature_ptr[1], signature_ptr[2], signature_ptr[3]);
                ^
../kernel/src/arch/x86/process/process.cpp:12:17: warning: declaration uses identifier '__save_ctx_for_reschedule', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
extern "C" auto __save_ctx_for_reschedule() -> std::uint64_t;
                ^~~~~~~~~~~~~~~~~~~~~~~~~
                _save_ctx_for_reschedule
../kernel/src/arch/x86/process/process.cpp:16:20: warning: variable 'processes' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static process processes[2];
                   ^
../kernel/src/arch/x86/process/process.cpp:16:20: warning: variable 'processes' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/process/process.cpp:20:9: warning: variable '__guard0' of type '::lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        SPINLOCK_SYNC_BLOCK;
        ^
../kernel/include/arch/x86/sync/spinlock.h:56:29: note: expanded from macro 'SPINLOCK_SYNC_BLOCK'
#define SPINLOCK_SYNC_BLOCK _SPINLOCK_SYNC_BLOCK(__COUNTER__)
                            ^
../kernel/include/arch/x86/sync/spinlock.h:54:5: note: expanded from macro '_SPINLOCK_SYNC_BLOCK'
    ::lock::spinlock_guard CONCAT(__guard, n) { CONCAT(__lock, n) }
    ^
../kernel/src/arch/x86/process/process.cpp:22:9: warning: variable 'tid' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t tid = thread_allocator.allocate();
        ^
                    const 
../kernel/src/arch/x86/process/process.cpp:28:9: warning: variable 'id32' of type 'std::uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        std::uint32_t id32 = tid;
        ^
                      const 
../kernel/src/arch/x86/process/process.cpp:30:9: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
        gsl::owner<thread*> th = new thread({id32, pid});
        ^~~~~~~~~~~~~~~~~~~
        auto
../kernel/src/arch/x86/process/process.cpp:30:29: warning: variable name 'th' is too short, expected at least 3 characters [readability-identifier-length]
        gsl::owner<thread*> th = new thread({id32, pid});
                            ^
../kernel/src/arch/x86/process/process.cpp:31:9: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        threads[tid] = th;
        ^
../kernel/src/arch/x86/process/process.cpp:41:9: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        processes[pid].pid = pid;
        ^
../kernel/src/arch/x86/process/process.cpp:42:16: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        return processes[pid];
               ^
../kernel/src/arch/x86/tty/tty.cpp:11:58: warning: variable 'framebuffer_request' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
[[gnu::used]] volatile static limine_framebuffer_request framebuffer_request{
                                                         ^
../kernel/src/arch/x86/tty/tty.cpp:11:58: warning: variable 'framebuffer_request' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/tty/tty.cpp:19:26: warning: variable 'ansi_colors' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static std::uint32_t ansi_colors[8] = {
                         ^
../kernel/src/arch/x86/tty/tty.cpp:19:26: warning: variable 'ansi_colors' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/tty/tty.cpp:20:9: warning: 0x00131a1c is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00131a1c, 0x00e74c4c, 0x006bb05d, 0x00e59e67, 0x005b98a9, 0x00b185db, 0x0051a39f, 0x00c4c4c4,
        ^
../kernel/src/arch/x86/tty/tty.cpp:20:21: warning: 0x00e74c4c is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00131a1c, 0x00e74c4c, 0x006bb05d, 0x00e59e67, 0x005b98a9, 0x00b185db, 0x0051a39f, 0x00c4c4c4,
                    ^
../kernel/src/arch/x86/tty/tty.cpp:20:33: warning: 0x006bb05d is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00131a1c, 0x00e74c4c, 0x006bb05d, 0x00e59e67, 0x005b98a9, 0x00b185db, 0x0051a39f, 0x00c4c4c4,
                                ^
../kernel/src/arch/x86/tty/tty.cpp:20:45: warning: 0x00e59e67 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00131a1c, 0x00e74c4c, 0x006bb05d, 0x00e59e67, 0x005b98a9, 0x00b185db, 0x0051a39f, 0x00c4c4c4,
                                            ^
../kernel/src/arch/x86/tty/tty.cpp:20:57: warning: 0x005b98a9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00131a1c, 0x00e74c4c, 0x006bb05d, 0x00e59e67, 0x005b98a9, 0x00b185db, 0x0051a39f, 0x00c4c4c4,
                                                        ^
../kernel/src/arch/x86/tty/tty.cpp:20:69: warning: 0x00b185db is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00131a1c, 0x00e74c4c, 0x006bb05d, 0x00e59e67, 0x005b98a9, 0x00b185db, 0x0051a39f, 0x00c4c4c4,
                                                                    ^
../kernel/src/arch/x86/tty/tty.cpp:20:81: warning: 0x0051a39f is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00131a1c, 0x00e74c4c, 0x006bb05d, 0x00e59e67, 0x005b98a9, 0x00b185db, 0x0051a39f, 0x00c4c4c4,
                                                                                ^
../kernel/src/arch/x86/tty/tty.cpp:20:93: warning: 0x00c4c4c4 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00131a1c, 0x00e74c4c, 0x006bb05d, 0x00e59e67, 0x005b98a9, 0x00b185db, 0x0051a39f, 0x00c4c4c4,
                                                                                            ^
../kernel/src/arch/x86/tty/tty.cpp:23:26: warning: variable 'ansi_bright_colours' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static std::uint32_t ansi_bright_colours[8] = {
                         ^
../kernel/src/arch/x86/tty/tty.cpp:23:26: warning: variable 'ansi_bright_colours' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/tty/tty.cpp:24:9: warning: 0x00343636 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00343636, 0x00c26f6f, 0x008dc776, 0x00e7ac7e, 0x007ab3c3, 0x00bb84e5, 0x006db0ad, 0x00cccccc,
        ^
../kernel/src/arch/x86/tty/tty.cpp:24:21: warning: 0x00c26f6f is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00343636, 0x00c26f6f, 0x008dc776, 0x00e7ac7e, 0x007ab3c3, 0x00bb84e5, 0x006db0ad, 0x00cccccc,
                    ^
../kernel/src/arch/x86/tty/tty.cpp:24:33: warning: 0x008dc776 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00343636, 0x00c26f6f, 0x008dc776, 0x00e7ac7e, 0x007ab3c3, 0x00bb84e5, 0x006db0ad, 0x00cccccc,
                                ^
../kernel/src/arch/x86/tty/tty.cpp:24:45: warning: 0x00e7ac7e is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00343636, 0x00c26f6f, 0x008dc776, 0x00e7ac7e, 0x007ab3c3, 0x00bb84e5, 0x006db0ad, 0x00cccccc,
                                            ^
../kernel/src/arch/x86/tty/tty.cpp:24:57: warning: 0x007ab3c3 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00343636, 0x00c26f6f, 0x008dc776, 0x00e7ac7e, 0x007ab3c3, 0x00bb84e5, 0x006db0ad, 0x00cccccc,
                                                        ^
../kernel/src/arch/x86/tty/tty.cpp:24:69: warning: 0x00bb84e5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00343636, 0x00c26f6f, 0x008dc776, 0x00e7ac7e, 0x007ab3c3, 0x00bb84e5, 0x006db0ad, 0x00cccccc,
                                                                    ^
../kernel/src/arch/x86/tty/tty.cpp:24:81: warning: 0x006db0ad is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00343636, 0x00c26f6f, 0x008dc776, 0x00e7ac7e, 0x007ab3c3, 0x00bb84e5, 0x006db0ad, 0x00cccccc,
                                                                                ^
../kernel/src/arch/x86/tty/tty.cpp:24:93: warning: 0x00cccccc is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        0x00343636, 0x00c26f6f, 0x008dc776, 0x00e7ac7e, 0x007ab3c3, 0x00bb84e5, 0x006db0ad, 0x00cccccc,
                                                                                            ^
../kernel/src/arch/x86/tty/tty.cpp:27:26: warning: variable 'default_bg' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static std::uint32_t default_bg = 0x00131a1c;
                         ^
../kernel/src/arch/x86/tty/tty.cpp:27:26: warning: variable 'default_bg' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/tty/tty.cpp:27:39: warning: 0x00131a1c is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    static std::uint32_t default_bg = 0x00131a1c;
                                      ^
../kernel/src/arch/x86/tty/tty.cpp:28:26: warning: variable 'default_fg' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static std::uint32_t default_fg = 0x00c5c8c9;
                         ^
../kernel/src/arch/x86/tty/tty.cpp:28:26: warning: variable 'default_fg' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/tty/tty.cpp:28:39: warning: 0x00c5c8c9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    static std::uint32_t default_fg = 0x00c5c8c9;
                                      ^
../kernel/src/arch/x86/tty/tty.cpp:29:26: warning: variable 'ctx' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static term_context* ctx;
                         ^
../kernel/src/arch/x86/tty/tty.cpp:29:26: warning: variable 'ctx' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
../kernel/src/arch/x86/tty/tty.cpp:29:26: warning: variable 'ctx' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/tty/tty.cpp:33:15: warning: variable name 'fb' is too short, expected at least 3 characters [readability-identifier-length]
        auto* fb = framebuffer_request.response->framebuffers[0];
              ^
../kernel/src/arch/x86/tty/tty.cpp:33:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        auto* fb = framebuffer_request.response->framebuffers[0];
                   ^
../kernel/src/arch/x86/tty/tty.cpp:39:17: warning: variable 'pages' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
                std::size_t pages = std::div_roundup(size, paging::PAGE_SMALL_SIZE);
                ^
                            const 
../kernel/src/arch/x86/tty/tty.cpp:43:27: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
                    auto* p = mm::pmm_allocate();
                          ^
../kernel/src/arch/x86/tty/tty.cpp:49:111: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            mm::make_virtual<std::uint32_t>(as_uptr(fb->address)), fb->width, fb->height, fb->pitch, nullptr, ansi_colors, ansi_bright_colours,
                                                                                                              ^
../kernel/src/arch/x86/tty/tty.cpp:49:124: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            mm::make_virtual<std::uint32_t>(as_uptr(fb->address)), fb->width, fb->height, fb->pitch, nullptr, ansi_colors, ansi_bright_colours,
                                                                                                                           ^
../kernel/src/arch/x86/tty/tty.cpp:50:39: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
            &default_bg, &default_fg, const_cast<void*>(as_vptr(decay_arr(font))), 8, 8, 0, 1, 1, 0);
                                      ^
../kernel/src/arch/x86/process/scheduler/scheduler.cpp:94:9: warning: variable '__guard0' of type '::lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        SPINLOCK_SYNC_BLOCK;
        ^
../kernel/include/arch/x86/sync/spinlock.h:56:29: note: expanded from macro 'SPINLOCK_SYNC_BLOCK'
#define SPINLOCK_SYNC_BLOCK _SPINLOCK_SYNC_BLOCK(__COUNTER__)
                            ^
../kernel/include/arch/x86/sync/spinlock.h:54:5: note: expanded from macro '_SPINLOCK_SYNC_BLOCK'
    ::lock::spinlock_guard CONCAT(__guard, n) { CONCAT(__lock, n) }
    ^
../kernel/src/arch/x86/process/scheduler/scheduler.cpp:127:9: warning: expected assignment source to be of type 'gsl::owner<>'; got 'context *' [cppcoreguidelines-owning-memory]
        local.ctxbuffer = &next_thread->ctx;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/pci/pci_scan.cpp:10:14: warning: function 'check_function' is within a recursive call chain [misc-no-recursion]
        void check_function(pci_device_ident dev, std::uint8_t function, int level)
             ^
../kernel/src/arch/x86/pci/pci_scan.cpp:32:14: note: example recursive call chain, starting from function 'check_device'
        void check_device(pci_device_ident dev, int level)
             ^
../kernel/src/arch/x86/pci/pci_scan.cpp:38:13: note: Frame #1: function 'check_device' calls function 'check_function' here:
            check_function(dev, 0, level);
            ^
../kernel/src/arch/x86/pci/pci_scan.cpp:21:17: note: Frame #2: function 'check_function' calls function 'check_bus' here:
                check_bus(secondary_bus, level + 1);
                ^
../kernel/src/arch/x86/pci/pci_scan.cpp:55:17: note: Frame #3: function 'check_bus' calls function 'check_device' here:
                check_device({bus, device}, level);
                ^
../kernel/src/arch/x86/pci/pci_scan.cpp:55:17: note: ... which was the starting point of the recursive call chain; there may be other cycles
../kernel/src/arch/x86/pci/pci_scan.cpp:12:46: warning: 0x6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            if ((dev.class_code(function) == 0x6) && (dev.subclass(function) == 0x4))
                                             ^
../kernel/src/arch/x86/pci/pci_scan.cpp:14:17: warning: variable 'secondary_bus' of type 'std::uint8_t' (aka 'unsigned char') can be declared 'const' [misc-const-correctness]
                std::uint8_t secondary_bus = dev.read_config(function, 0x18) >> 8;
                ^
                             const 
../kernel/src/arch/x86/pci/pci_scan.cpp:14:72: warning: 0x18 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
                std::uint8_t secondary_bus = dev.read_config(function, 0x18) >> 8;
                                                                       ^
../kernel/src/arch/x86/pci/pci_scan.cpp:17:21: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                    std::printf("[PCI]%*c%02hhx:%02hhx.%hhx: bridge dev=%02hx:%02hhx-r%02hhx\n bus=%02hhx", level, ' ', dev.bus(), dev.slot(),
                    ^
../kernel/src/arch/x86/pci/pci_scan.cpp:26:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
                std::printf("[PCI]%*c%02hhx:%02hhx.%hhx: class=%02hhx:%02hhx dev=%02hx:%02hhx-r%02hhx\n", level, ' ', dev.bus(), dev.slot(), function,
                ^
../kernel/src/arch/x86/pci/pci_scan.cpp:32:14: warning: function 'check_device' is within a recursive call chain [misc-no-recursion]
        void check_device(pci_device_ident dev, int level)
             ^
../kernel/src/arch/x86/pci/pci_scan.cpp:34:37: warning: 0xFFFF is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            if (dev.vendor_id(0) == 0xFFFF)
                                    ^
../kernel/src/arch/x86/pci/pci_scan.cpp:43:52: warning: 0xFFFF is a magic number; consider replacing it with a named constant [readability-magic-numbers]
                    if (dev.vendor_id(function) != 0xFFFF)
                                                   ^
../kernel/src/arch/x86/pci/pci_scan.cpp:51:14: warning: function 'check_bus' is within a recursive call chain [misc-no-recursion]
        void check_bus(std::uint8_t bus, int level)
             ^
../kernel/src/arch/x86/pci/pci_scan.cpp:62:9: warning: variable 'root' of type 'pci_device_ident' can be declared 'const' [misc-const-correctness]
        pci_device_ident root{0, 0};
        ^
                         const 
../kernel/src/arch/x86/pci/pci_scan.cpp:71:49: warning: 0xFFFF is a magic number; consider replacing it with a named constant [readability-magic-numbers]
                if (root.vendor_id(function) != 0xFFFF)
                                                ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:11:11: warning: class 'romfont' defines a copy constructor and a move constructor but does not define a destructor, a copy assignment operator or a move assignment operator [cppcoreguidelines-special-member-functions]
    class romfont
          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:23:27: warning: 2 adjacent parameters of 'romfont' of similar type ('std::uint8_t') are easily swapped by mistake [bugprone-easily-swappable-parameters]
        constexpr romfont(std::uint8_t w, std::uint8_t h) : font_width(w), font_height(h), font(nullptr) {}
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:23:40: note: the first parameter in the range is 'w'
        constexpr romfont(std::uint8_t w, std::uint8_t h) : font_width(w), font_height(h), font(nullptr) {}
                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:23:56: note: the last parameter in the range is 'h'
        constexpr romfont(std::uint8_t w, std::uint8_t h) : font_width(w), font_height(h), font(nullptr) {}
                                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:23:40: warning: parameter name 'w' is too short, expected at least 3 characters [readability-identifier-length]
        constexpr romfont(std::uint8_t w, std::uint8_t h) : font_width(w), font_height(h), font(nullptr) {}
                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:23:56: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
        constexpr romfont(std::uint8_t w, std::uint8_t h) : font_width(w), font_height(h), font(nullptr) {}
                                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:29:27: warning: 2 adjacent parameters of 'romfont' of similar type ('std::uint8_t') are easily swapped by mistake [bugprone-easily-swappable-parameters]
        constexpr romfont(std::uint8_t w, std::uint8_t h, void* n) : font_width(w), font_height(h), font(n) {}
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:29:40: note: the first parameter in the range is 'w'
        constexpr romfont(std::uint8_t w, std::uint8_t h, void* n) : font_width(w), font_height(h), font(n) {}
                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:29:56: note: the last parameter in the range is 'h'
        constexpr romfont(std::uint8_t w, std::uint8_t h, void* n) : font_width(w), font_height(h), font(n) {}
                                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:29:40: warning: parameter name 'w' is too short, expected at least 3 characters [readability-identifier-length]
        constexpr romfont(std::uint8_t w, std::uint8_t h, void* n) : font_width(w), font_height(h), font(n) {}
                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:29:56: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
        constexpr romfont(std::uint8_t w, std::uint8_t h, void* n) : font_width(w), font_height(h), font(n) {}
                                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:29:65: warning: parameter name 'n' is too short, expected at least 3 characters [readability-identifier-length]
        constexpr romfont(std::uint8_t w, std::uint8_t h, void* n) : font_width(w), font_height(h), font(n) {}
                                                                ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:35:42: warning: parameter name 'f' is too short, expected at least 3 characters [readability-identifier-length]
        constexpr romfont(const romfont& f) = default;
                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:38:37: warning: parameter name 'f' is too short, expected at least 3 characters [readability-identifier-length]
        constexpr romfont(romfont&& f) = default;
                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:42:9: warning: function 'width' should be marked [[nodiscard]] [modernize-use-nodiscard]
        constexpr std::uint8_t width() const { return font_width; }
        ^
        [[nodiscard]] 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:42:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        constexpr std::uint8_t width() const { return font_width; }
                  ~~~~~~~~~~~~ ^
                  auto                       -> std::uint8_t
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:46:9: warning: function 'height' should be marked [[nodiscard]] [modernize-use-nodiscard]
        constexpr std::uint8_t height() const { return font_height; }
        ^
        [[nodiscard]] 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:46:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        constexpr std::uint8_t height() const { return font_height; }
                  ~~~~~~~~~~~~ ^
                  auto                        -> std::uint8_t
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:50:9: warning: function 'bpc' should be marked [[nodiscard]] [modernize-use-nodiscard]
        constexpr std::size_t bpc() const { return (font_width * font_height) >> 3; }
        ^
        [[nodiscard]] 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:50:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        constexpr std::size_t bpc() const { return (font_width * font_height) >> 3; }
                  ~~~~~~~~~~~ ^
                  auto                    -> std::size_t
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:59:9: warning: function 'char_at' should be marked [[nodiscard]] [modernize-use-nodiscard]
        char* char_at(char ch) const { return &(cast_ptr<char>(font))[ch * bpc()]; }
        ^
        [[nodiscard]] 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:59:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        char* char_at(char ch) const { return &(cast_ptr<char>(font))[ch * bpc()]; }
        ~~~~~ ^
        auto                         -> char*
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/tty.h:59:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        char* char_at(char ch) const { return &(cast_ptr<char>(font))[ch * bpc()]; }
                                               ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/elf/elf.h:34:26: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        std::uint8_t pad[7]; // sakyua moment
                         ^
../kernel/src/arch/x86/mm/mm.cpp:18:9: warning: variable 'index' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t index = std::first_set_bit(bitmask);
        ^
                    const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/misc/cast.h:26:12: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
    return reinterpret_cast<T*>(ptr);
           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/misc/cast.h:29:82: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
inline auto as_ptr(std::uintptr_t ptr) { return detail::_castable_to_any_pointer(reinterpret_cast<void*>(ptr)); }
                                                                                 ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/common/misc/cast.h:55:59: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
inline auto as_vptr(std::uintptr_t ptr) -> void* { return reinterpret_cast<void*>(ptr); }
                                                          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/idt/idt.h:57:53: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            return 0x8000 | ((std::uint16_t)_dpl << 13) | ((std::uint16_t)gate << 8) | _ist;
                                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/idt/idt.h:75:28: warning: constructor does not initialize these fields: offset_low, flags, offset_mid, offset_high, reserved [cppcoreguidelines-pro-type-member-init]
    struct [[gnu::packed]] idt_entry
                           ^
../kernel/src/arch/x86/mm/malloc.cpp:22:23: warning: variable 'root' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        block_header* root = nullptr;
                      ^
../kernel/src/arch/x86/mm/malloc.cpp:22:23: warning: variable 'root' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
../kernel/src/arch/x86/mm/malloc.cpp:23:23: warning: variable 'last' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        block_header* last = nullptr;
                      ^
../kernel/src/arch/x86/mm/malloc.cpp:23:23: warning: variable 'last' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
../kernel/src/arch/x86/mm/malloc.cpp:24:21: warning: variable 'malloced_bytes' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        std::size_t malloced_bytes = 0;
                    ^
../kernel/src/arch/x86/mm/malloc.cpp:28:33: warning: function 'next_of' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
    inline static block_header* next_of(block_header* header) { return as_ptr(as_uptr(header) + sizeof(block_header) + (header->size & ~1)); }
                                ^
../kernel/src/arch/x86/mm/malloc.cpp:28:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    inline static block_header* next_of(block_header* header) { return as_ptr(as_uptr(header) + sizeof(block_header) + (header->size & ~1)); }
                  ~~~~~~~~~~~~~ ^
                  auto                                        -> block_header*
../kernel/src/arch/x86/mm/malloc.cpp:30:24: warning: function 'extend' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
    inline static auto extend(void* buf, std::size_t size) -> std::size_t
                       ^
../kernel/src/arch/x86/mm/malloc.cpp:30:37: warning: parameter 'buf' is unused [misc-unused-parameters]
    inline static auto extend(void* buf, std::size_t size) -> std::size_t
                              ~~~~~~^~~~~
../kernel/src/arch/x86/mm/malloc.cpp:32:9: warning: variable 'pages' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t pages = std::div_roundup(size, paging::PAGE_SMALL_SIZE);
        ^
                    const 
../kernel/src/arch/x86/mm/malloc.cpp:48:53: warning: assigning newly created 'gsl::owner<>' to non-owner 'block_header *' [cppcoreguidelines-owning-memory]
    void init(void* ptr, std::size_t size) { root = last = new (ptr) block_header{(size - sizeof(block_header)) | 1, nullptr}; }
                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/mm/malloc.cpp:69:17: warning: variable 'bsize' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
                std::size_t bsize = hdr->size & ~1;
                ^
                            const 
../kernel/src/arch/x86/mm/malloc.cpp:73:21: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
                    gsl::owner<block_header*> next_block = new (next_of(hdr)) block_header{(bsize - size - sizeof(block_header)) | 1, hdr};
                    ^~~~~~~~~~~~~~~~~~~~~~~~~
                    auto
../kernel/src/arch/x86/mm/malloc.cpp:86:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                return (void*)++hdr;
                              ^
../kernel/src/arch/x86/mm/malloc.cpp:92:9: warning: variable 'new_size' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t new_size = extend((void*)next_of(last), size + 0x100) & ~7;
        ^
                    const 
../kernel/src/arch/x86/mm/malloc.cpp:92:78: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        std::size_t new_size = extend((void*)next_of(last), size + 0x100) & ~7;
                                                                             ^
../kernel/src/arch/x86/mm/malloc.cpp:95:13: warning: initializing non-owner 'block_header *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
            auto* u = new (next_of(last)) block_header{size & ~1, last};
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/mm/malloc.cpp:95:19: warning: variable name 'u' is too short, expected at least 3 characters [readability-identifier-length]
            auto* u = new (next_of(last)) block_header{size & ~1, last};
                  ^
../kernel/src/arch/x86/mm/malloc.cpp:96:13: warning: initializing non-owner 'block_header *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
            auto* l = new (next_of(u)) block_header{(new_size - size - 2 * sizeof(block_header)) | 1, u};
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/mm/malloc.cpp:96:19: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
            auto* l = new (next_of(u)) block_header{(new_size - size - 2 * sizeof(block_header)) | 1, u};
                  ^
../kernel/src/arch/x86/mm/malloc.cpp:98:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            return (void*)++u;
                          ^
../kernel/src/arch/x86/mm/malloc.cpp:100:9: warning: do not use 'else' after 'return' [readability-else-after-return]
        else
        ^~~~
../kernel/src/arch/x86/mm/malloc.cpp:102:13: warning: variable 'bsize' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::size_t bsize = ((last->size & ~1) + new_size) - sizeof(block_header) - size;
            ^
note: this fix will not be applied because it overlaps with another fix
../kernel/src/arch/x86/mm/malloc.cpp:104:13: warning: initializing non-owner 'block_header *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
            auto* l = new (next_of(last)) block_header{bsize | 1, last};
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/mm/malloc.cpp:104:19: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
            auto* l = new (next_of(last)) block_header{bsize | 1, last};
                  ^
../kernel/src/arch/x86/mm/malloc.cpp:106:19: warning: variable name 'u' is too short, expected at least 3 characters [readability-identifier-length]
            auto* u = last;
                  ^
../kernel/src/arch/x86/mm/malloc.cpp:108:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            return (void*)++u;
                          ^
../kernel/src/arch/x86/mm/malloc.cpp:120:9: warning: variable 'aligned_ptr' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uintptr_t aligned_ptr = std::div_roundup(ptr, align);
        ^
                       const 
../kernel/src/arch/x86/mm/malloc.cpp:125:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            as_ptr<std::uintptr_t>(aligned_ptr)[-1] = ptr | 1;
            ^
../kernel/src/arch/x86/mm/malloc.cpp:133:55: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        block_header* hdr = as_ptr<block_header>(buf) - 1;
                                                      ^
../kernel/src/arch/x86/mm/malloc.cpp:143:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            target[i] = src[i];
            ^
../kernel/src/arch/x86/mm/malloc.cpp:143:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            target[i] = src[i];
                        ^
../kernel/src/arch/x86/mm/malloc.cpp:155:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        if (as_ptr<std::uintptr_t>(buffer)[-1])
            ^
../kernel/src/arch/x86/mm/malloc.cpp:157:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            buffer = as_vptr(as_ptr<std::uintptr_t>(buffer)[-1] & ~1);
                             ^
../kernel/src/arch/x86/mm/malloc.cpp:160:50: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        auto* type = as_ptr<std::size_t>(buffer) - 1;
                                                 ^
../kernel/src/arch/x86/mm/malloc.cpp:161:50: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        auto* hdr = as_ptr<block_header>(buffer) - 1;
                                                 ^
../kernel/src/arch/x86/mm/malloc.cpp:170:9: warning: variable 'is_prev' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool is_prev = hdr->back ? hdr->back->size & 1 : false;
        ^
             const 
../kernel/src/arch/x86/mm/malloc.cpp:170:24: warning: implicit conversion 'block_header *' -> bool [readability-implicit-bool-conversion]
        bool is_prev = hdr->back ? hdr->back->size & 1 : false;
                       ^
                                 != nullptr
../kernel/src/arch/x86/mm/malloc.cpp:170:24: warning: implicit conversion 'std::size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
        bool is_prev = hdr->back ? hdr->back->size & 1 : false;
                       ^
                                                               != 0u
../kernel/src/arch/x86/mm/malloc.cpp:170:58: warning: implicit conversion bool -> 'std::size_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
        bool is_prev = hdr->back ? hdr->back->size & 1 : false;
                                                         ^~~~~
                                                         0u
../kernel/src/arch/x86/mm/malloc.cpp:171:9: warning: variable 'is_next' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool is_next = hdr != last ? next_of(hdr)->size & 1 : false;
        ^
             const 
../kernel/src/arch/x86/mm/malloc.cpp:171:24: warning: implicit conversion 'std::size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
        bool is_next = hdr != last ? next_of(hdr)->size & 1 : false;
                       ^
                                                                    != 0u
../kernel/src/arch/x86/mm/malloc.cpp:171:63: warning: implicit conversion bool -> 'std::size_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
        bool is_next = hdr != last ? next_of(hdr)->size & 1 : false;
                                                              ^~~~~
                                                              0u
../kernel/src/arch/x86/cpuid/cpuid.cpp:13:23: warning: variable 'cpuid_max' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        std::uint32_t cpuid_max;
                      ^
../kernel/src/arch/x86/cpuid/cpuid.cpp:14:74: warning: variable 'features' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        std::array<std::uint32_t, config::get_val<"cpuid-feature-size">> features;
                                                                         ^
../kernel/src/arch/x86/cpuid/cpuid.cpp:15:35: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        std::array<std::uint32_t, 6> vendor_buf;
                                  ^
../kernel/src/arch/x86/cpuid/cpuid.cpp:15:38: warning: variable 'vendor_buf' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        std::array<std::uint32_t, 6> vendor_buf;
                                     ^
../kernel/src/arch/x86/cpuid/cpuid.cpp:16:35: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        std::array<std::uint32_t, 13> brand_buf;
                                  ^
../kernel/src/arch/x86/cpuid/cpuid.cpp:16:39: warning: variable 'brand_buf' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        std::array<std::uint32_t, 13> brand_buf;
                                      ^
../kernel/src/arch/x86/cpuid/cpuid.cpp:28:80: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            cpuid(CPUID_PROCESSOR_BRAND_STRING_START + i, ptr_start, ptr_start + 1, ptr_start + 2, ptr_start + 3);
                                                                               ^
../kernel/src/arch/x86/cpuid/cpuid.cpp:28:95: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            cpuid(CPUID_PROCESSOR_BRAND_STRING_START + i, ptr_start, ptr_start + 1, ptr_start + 2, ptr_start + 3);
                                                                                              ^
../kernel/src/arch/x86/cpuid/cpuid.cpp:28:110: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            cpuid(CPUID_PROCESSOR_BRAND_STRING_START + i, ptr_start, ptr_start + 1, ptr_start + 2, ptr_start + 3);
                                                                                                             ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/vfs/vfs.h:29:7: warning: constructor does not initialize these bases: simple_refcountable [cppcoreguidelines-pro-type-member-init]
class vfs_operations : public std::simple_refcountable<std::uint32_t>
      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/vfs/vfs.h:50:19: warning: private field 'flags' is not used [clang-diagnostic-unused-private-field]
    std::uint32_t flags;                     /* flags */
                  ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/vfs/vfs.h:51:19: warning: private field 'block_size' is not used [clang-diagnostic-unused-private-field]
    std::uint32_t block_size;                    /* native block size */
                  ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/vfs/vfs.h:52:19: warning: private field 'fs_id' is not used [clang-diagnostic-unused-private-field]
    std::uint32_t fs_id;                     /* file system id */
                  ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/io.h:11:18: warning: 2 adjacent parameters of 'outw' of similar type ('std::uint16_t') are easily swapped by mistake [bugprone-easily-swappable-parameters]
inline void outw(std::uint16_t port, std::uint16_t val) { asm volatile("outw %0, %1" : : "a"(val), "Nd"(port)); }
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/io.h:11:32: note: the first parameter in the range is 'port'
inline void outw(std::uint16_t port, std::uint16_t val) { asm volatile("outw %0, %1" : : "a"(val), "Nd"(port)); }
                               ^~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/io.h:11:52: note: the last parameter in the range is 'val'
inline void outw(std::uint16_t port, std::uint16_t val) { asm volatile("outw %0, %1" : : "a"(val), "Nd"(port)); }
                                                   ^~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/io.h:23:5: warning: variable 'ret' of type 'std::uint8_t' (aka 'unsigned char') can be declared 'const' [misc-const-correctness]
    std::uint8_t ret = 0;
    ^
                 const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/io.h:33:5: warning: variable 'ret' of type 'std::uint16_t' (aka 'unsigned short') can be declared 'const' [misc-const-correctness]
    std::uint16_t ret = 0;
    ^
                  const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/io.h:43:5: warning: variable 'ret' of type 'std::uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    std::uint32_t ret = 0;
    ^
                  const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:39: warning: 4 adjacent parameters of 'cpuid' of similar type ('std::uint32_t *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:54: note: the first parameter in the range is 'a'
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                     ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:108: note: the last parameter in the range is 'd'
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                                                                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:54: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                     ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:54: warning: pointer parameter 'a' can be pointer to const [readability-non-const-parameter]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                     ^
                                      const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:72: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:72: warning: pointer parameter 'b' can be pointer to const [readability-non-const-parameter]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                                       ^
                                                        const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:90: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:90: warning: pointer parameter 'c' can be pointer to const [readability-non-const-parameter]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                                                         ^
                                                                          const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:108: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                                                                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:12:108: warning: pointer parameter 'd' can be pointer to const [readability-non-const-parameter]
inline void cpuid(std::uint32_t code, std::uint32_t* a, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d)
                                                                                                           ^
                                                                                            const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:46: warning: 3 adjacent parameters of 'cpuid_ext' of similar type ('std::uint32_t *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:61: note: the first parameter in the range is 'b'
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                                            ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:97: note: the last parameter in the range is 'd'
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                                                                                ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:61: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                                            ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:61: warning: pointer parameter 'b' can be pointer to const [readability-non-const-parameter]
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                                            ^
                                             const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:79: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                                                              ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:79: warning: pointer parameter 'c' can be pointer to const [readability-non-const-parameter]
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                                                              ^
                                                               const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:97: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                                                                                ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:45:97: warning: pointer parameter 'd' can be pointer to const [readability-non-const-parameter]
inline auto cpuid_ext(std::uint32_t feature, std::uint32_t* b, std::uint32_t* c, std::uint32_t* d) -> std::uint32_t
                                                                                                ^
                                                                                 const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:47:5: warning: variable 'max' of type 'std::uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    std::uint32_t max = 0;
    ^
                  const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:48:74: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    asm volatile("cpuid" : "=a"(max), "=b"(*b), "=c"(*c), "=d"(*d) : "a"(7), "c"(feature));
                                                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:52:9: warning: function-like macro 'READ_CR' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define READ_CR(CR)                                                                                                                                  \
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:59:9: warning: function-like macro 'WRITE_CR' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define WRITE_CR(CR)                                                                                                                                 \
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:129:19: warning: 2 adjacent parameters of 'wrmsr' of similar type ('std::uint64_t') are easily swapped by mistake [bugprone-easily-swappable-parameters]
inline void wrmsr(std::uint64_t msr, std::uint64_t value)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:129:33: note: the first parameter in the range is 'msr'
inline void wrmsr(std::uint64_t msr, std::uint64_t value)
                                ^~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:129:52: note: the last parameter in the range is 'value'
inline void wrmsr(std::uint64_t msr, std::uint64_t value)
                                                   ^~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:131:5: warning: variable 'low' of type 'std::uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    std::uint32_t low = value & 0xFFFFFFFF;
    ^
                  const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:131:33: warning: 0xFFFFFFFF is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    std::uint32_t low = value & 0xFFFFFFFF;
                                ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:132:5: warning: variable 'high' of type 'std::uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    std::uint32_t high = value >> 32;
    ^
                  const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:140:38: warning: 2 adjacent parameters of 'wrmsr' of similar type ('std::uint32_t') are easily swapped by mistake [bugprone-easily-swappable-parameters]
inline void wrmsr(std::uint64_t msr, std::uint32_t a, std::uint32_t d) { asm volatile("wrmsr" : : "c"(msr), "a"(a), "d"(d)); }
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:140:52: note: the first parameter in the range is 'a'
inline void wrmsr(std::uint64_t msr, std::uint32_t a, std::uint32_t d) { asm volatile("wrmsr" : : "c"(msr), "a"(a), "d"(d)); }
                                                   ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:140:69: note: the last parameter in the range is 'd'
inline void wrmsr(std::uint64_t msr, std::uint32_t a, std::uint32_t d) { asm volatile("wrmsr" : : "c"(msr), "a"(a), "d"(d)); }
                                                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:140:52: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
inline void wrmsr(std::uint64_t msr, std::uint32_t a, std::uint32_t d) { asm volatile("wrmsr" : : "c"(msr), "a"(a), "d"(d)); }
                                                   ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:140:69: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
inline void wrmsr(std::uint64_t msr, std::uint32_t a, std::uint32_t d) { asm volatile("wrmsr" : : "c"(msr), "a"(a), "d"(d)); }
                                                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:147:5: warning: variable 'low' of type 'std::uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    std::uint32_t low = 0;
    ^
                  const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:148:5: warning: variable 'high' of type 'std::uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    std::uint32_t high = 0;
    ^
                  const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/asm/cpu.h:165:9: warning: function-like macro 'intr' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define intr(int_no) asm volatile("int $" #int_no);
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:10:11: warning: class 'pci_device_ident' defines a copy constructor but does not define a destructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
    class pci_device_ident
          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:16:75: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            return ((std::uint32_t)_bus << 16) | ((std::uint32_t)_slot << 11) | ((std::uint32_t)func << 8) | ((std::uint32_t)offset & 0xfc) |
                                                                          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:16:135: warning: 0xfc is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            return ((std::uint32_t)_bus << 16) | ((std::uint32_t)_slot << 11) | ((std::uint32_t)func << 8) | ((std::uint32_t)offset & 0xfc) |
                                                                                                                                      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:21:36: warning: 2 adjacent parameters of 'pci_device_ident' of similar type ('std::uint8_t') are easily swapped by mistake [bugprone-easily-swappable-parameters]
        constexpr pci_device_ident(std::uint8_t bus, std::uint8_t slot) : _bus(bus), _slot(slot) {}
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:21:49: note: the first parameter in the range is 'bus'
        constexpr pci_device_ident(std::uint8_t bus, std::uint8_t slot) : _bus(bus), _slot(slot) {}
                                                ^~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:21:67: note: the last parameter in the range is 'slot'
        constexpr pci_device_ident(std::uint8_t bus, std::uint8_t slot) : _bus(bus), _slot(slot) {}
                                                                  ^~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:42:120: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        [[nodiscard]] inline auto class_code(std::uint8_t func) const -> std::uint8_t { return read_config(func, 8) >> 24; }
                                                                                                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:46:108: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        [[nodiscard]] inline auto bist(std::uint8_t func) const -> std::uint8_t { return read_config(func, 12) >> 24; }
                                                                                                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:46:115: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        [[nodiscard]] inline auto bist(std::uint8_t func) const -> std::uint8_t { return read_config(func, 12) >> 24; }
                                                                                                                  ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:47:115: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        [[nodiscard]] inline auto header_type(std::uint8_t func) const -> std::uint8_t { return read_config(func, 12) >> 16; }
                                                                                                                  ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:48:117: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        [[nodiscard]] inline auto latency_timer(std::uint8_t func) const -> std::uint8_t { return read_config(func, 12) >> 8; }
                                                                                                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/pci/pci.h:49:119: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        [[nodiscard]] inline auto cache_line_size(std::uint8_t func) const -> std::uint8_t { return read_config(func, 12); }
                                                                                                                      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic_flag_builder.h:15:53: warning: 17 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return (static_cast<std::uint32_t>(mode) << 17) | (static_cast<std::uint32_t>(is_masked) << 16) |
                                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic_flag_builder.h:16:64: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
               (static_cast<std::uint32_t>(is_send_pending) << 12) | (vector);
                                                               ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic_flag_builder.h:30:112: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return (static_cast<std::uint32_t>(is_masked) << 16) | (static_cast<std::uint32_t>(is_send_pending) << 12) | vector;
                                                                                                               ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic_flag_builder.h:51:116: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return build_lvt_cmci(is_masked, is_send_pending, mode, vector) | (static_cast<std::uint32_t>(is_level) << 15) |
                                                                                                                   ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic_flag_builder.h:52:59: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
               (static_cast<std::uint32_t>(remote_irr) << 14) | (static_cast<std::uint32_t>(int_in_pin_polarity) << 13);
                                                          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic_flag_builder.h:52:117: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
               (static_cast<std::uint32_t>(remote_irr) << 14) | (static_cast<std::uint32_t>(int_in_pin_polarity) << 13);
                                                                                                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic.h:49:34: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            register_reserved r2[6];
                                 ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic.h:101:35: warning: method 'get_apic_base' can be made static [readability-convert-member-functions-to-static]
        [[nodiscard]] inline auto get_apic_base() -> std::uintptr_t { return 0x0ffffff000 & rdmsr(msr::IA32_APIC_BASE); }
                                  ^
                      static 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/apic/apic.h:101:78: warning: 0x0ffffff000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        [[nodiscard]] inline auto get_apic_base() -> std::uintptr_t { return 0x0ffffff000 & rdmsr(msr::IA32_APIC_BASE); }
                                                                             ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:2:9: warning: declaration uses identifier '_LIMINE_H', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
#define _LIMINE_H 1
        ^~~~~~~~~
        LIMINE_H
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:2:9: warning: macro '_LIMINE_H' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:11:11: warning: function-like macro 'LIMINE_PTR' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#  define LIMINE_PTR(TYPE) TYPE
          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:23:9: warning: macro 'LIMINE_MEDIA_TYPE_GENERIC' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEDIA_TYPE_GENERIC 0
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:24:9: warning: macro 'LIMINE_MEDIA_TYPE_OPTICAL' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEDIA_TYPE_OPTICAL 1
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:25:9: warning: macro 'LIMINE_MEDIA_TYPE_TFTP' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEDIA_TYPE_TFTP 2
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:94:9: warning: macro 'LIMINE_FRAMEBUFFER_RGB' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_FRAMEBUFFER_RGB 1
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:109:25: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    std::uint8_t unused[7];
                        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:130:9: warning: macro 'LIMINE_TERMINAL_CB_DEC' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_TERMINAL_CB_DEC 10
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:131:9: warning: macro 'LIMINE_TERMINAL_CB_BELL' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_TERMINAL_CB_BELL 20
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:132:9: warning: macro 'LIMINE_TERMINAL_CB_PRIVATE_ID' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_TERMINAL_CB_PRIVATE_ID 30
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:133:9: warning: macro 'LIMINE_TERMINAL_CB_STATUS_REPORT' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_TERMINAL_CB_STATUS_REPORT 40
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:134:9: warning: macro 'LIMINE_TERMINAL_CB_POS_REPORT' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_TERMINAL_CB_POS_REPORT 50
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:135:9: warning: macro 'LIMINE_TERMINAL_CB_KBD_LEDS' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_TERMINAL_CB_KBD_LEDS 60
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:136:9: warning: macro 'LIMINE_TERMINAL_CB_MODE' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_TERMINAL_CB_MODE 70
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:137:9: warning: macro 'LIMINE_TERMINAL_CB_LINUX' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_TERMINAL_CB_LINUX 80
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:146:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
typedef void (*limine_terminal_write)(struct limine_terminal *, const char *, std::uint64_t);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using limine_terminal_write = void (*)(struct limine_terminal *, const char *, std::uint64_t)
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:147:19: warning: use 'using' instead of 'typedef' [modernize-use-using]
typedef void (*limine_terminal_callback)(struct limine_terminal *, std::uint64_t, std::uint64_t, std::uint64_t, std::uint64_t);
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:189:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
typedef void (*limine_goto_address)(struct limine_smp_info *);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using limine_goto_address = void (*)(struct limine_smp_info *)
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:245:9: warning: macro 'LIMINE_MEMMAP_USABLE' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEMMAP_USABLE                 0
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:246:9: warning: macro 'LIMINE_MEMMAP_RESERVED' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEMMAP_RESERVED               1
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:247:9: warning: macro 'LIMINE_MEMMAP_ACPI_RECLAIMABLE' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEMMAP_ACPI_RECLAIMABLE       2
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:248:9: warning: macro 'LIMINE_MEMMAP_ACPI_NVS' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEMMAP_ACPI_NVS               3
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:249:9: warning: macro 'LIMINE_MEMMAP_BAD_MEMORY' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEMMAP_BAD_MEMORY             4
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:250:9: warning: macro 'LIMINE_MEMMAP_BOOTLOADER_RECLAIMABLE' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEMMAP_BOOTLOADER_RECLAIMABLE 5
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:251:9: warning: macro 'LIMINE_MEMMAP_KERNEL_AND_MODULES' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEMMAP_KERNEL_AND_MODULES     6
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:252:9: warning: macro 'LIMINE_MEMMAP_FRAMEBUFFER' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define LIMINE_MEMMAP_FRAMEBUFFER            7
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:276:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
typedef void (*limine_entry_point)(void);
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using limine_entry_point = void (*)()
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/limine.h:276:36: warning: redundant void argument list in typedef [modernize-redundant-void-arg]
typedef void (*limine_entry_point)(void);
                                   ^
note: this fix will not be applied because it overlaps with another fix
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/spinlock.h:37:11: warning: class 'lock_guard' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
    class lock_guard
          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/spinlock.h:50:9: warning: declaration uses identifier '_CONCAT', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
#define _CONCAT(prefix, suffix) prefix##suffix
        ^~~~~~~
        CONCAT
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/spinlock.h:50:9: warning: function-like macro '_CONCAT' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/spinlock.h:51:9: warning: function-like macro 'CONCAT' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define CONCAT(prefix, suffix) _CONCAT(prefix, suffix)
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/spinlock.h:52:9: warning: declaration uses identifier '_SPINLOCK_SYNC_BLOCK', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
#define _SPINLOCK_SYNC_BLOCK(n)                                                                                             \
        ^~~~~~~~~~~~~~~~~~~~
        SPINLOCK_SYNC_BLOCK
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/spinlock.h:52:9: warning: function-like macro '_SPINLOCK_SYNC_BLOCK' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/boot_resource.h:55:22: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
            callback(mmap_entries[i]);
                     ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/boot_resource.h:62:69: warning: 0xffff800000000000ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        auto* table = as_ptr<acpi::xsdt>(root_table->xsdt_address + 0xffff800000000000ul);
                                                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/boot_resource.h:62:69: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
        auto* table = as_ptr<acpi::xsdt>(root_table->xsdt_address + 0xffff800000000000ul);
                                                                    ^                 ~~
                                                                                      UL
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/kinit/boot_resource.h:63:9: warning: variable 'len' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t len = (table->h.length - sizeof(acpi::acpi_sdt_header)) / 8;
        ^
                    const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/process/elf/loader.h:2:10: error: 'arch/common/elf/elf.h' file not found [clang-diagnostic-error]
#include <arch/common/elf/elf.h>
         ^~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/process/context.h:39:27: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        std::uint64_t rgp[15];
                          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/process/context.h:68:13: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
            my_context.rgp[reg] = value;
            ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/utils.h:8:31: warning: declaration uses identifier '_Ts', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
        template <typename... _Ts>
                              ^~~
                              Ts
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/utils.h:18:43: warning: declaration uses identifier '_Ts', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
        template <typename T, typename... _Ts>
                                          ^~~
                                          Ts
../kernel/src/arch/x86/gdt/gdt.cpp:8:26: warning: variable 'gdt' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static std::uint64_t gdt[] = {0, 0x00af9b000000ffff, 0x00af93000000ffff, 0x00affb000000ffff, 0x00aff3000000ffff};
                         ^
../kernel/src/arch/x86/gdt/gdt.cpp:8:26: warning: variable 'gdt' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/gdt/gdt.cpp:8:38: warning: 0x00af9b000000ffff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    static std::uint64_t gdt[] = {0, 0x00af9b000000ffff, 0x00af93000000ffff, 0x00affb000000ffff, 0x00aff3000000ffff};
                                     ^
../kernel/src/arch/x86/gdt/gdt.cpp:8:58: warning: 0x00af93000000ffff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    static std::uint64_t gdt[] = {0, 0x00af9b000000ffff, 0x00af93000000ffff, 0x00affb000000ffff, 0x00aff3000000ffff};
                                                         ^
../kernel/src/arch/x86/gdt/gdt.cpp:8:78: warning: 0x00affb000000ffff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    static std::uint64_t gdt[] = {0, 0x00af9b000000ffff, 0x00af93000000ffff, 0x00affb000000ffff, 0x00aff3000000ffff};
                                                                             ^
../kernel/src/arch/x86/gdt/gdt.cpp:8:98: warning: 0x00aff3000000ffff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    static std::uint64_t gdt[] = {0, 0x00af9b000000ffff, 0x00af93000000ffff, 0x00affb000000ffff, 0x00aff3000000ffff};
                                                                                                 ^
../kernel/src/arch/x86/gdt/gdt.cpp:31:9: warning: variable 'desc' of type 'gdt_desc' (aka 'packed_tuple<unsigned short, unsigned long>') can be declared 'const' [misc-const-correctness]
        gdt_desc desc(sizeof(gdt), as_uptr(decay_arr(gdt)));
        ^
                 const 
../kernel/src/arch/x86/gdt/gdt.cpp:38:9: warning: variable 'desc' of type 'gdt_desc' (aka 'packed_tuple<unsigned short, unsigned long>') can be declared 'const' [misc-const-correctness]
        gdt_desc desc(sizeof(gdt_entries), as_uptr(&smp::core_local::get().gdt));
        ^
                 const 
../kernel/src/arch/x86/gdt/gdt.cpp:41:13: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        ltr(40);
            ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/tty/tty.h:11:9: warning: function-like macro 'RED' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define RED(c) "\x1b[31m" c "\x1b[0m"
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/tty/tty.h:12:9: warning: function-like macro 'CYAN' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define CYAN(c) "\x1b[36m" c "\x1b[0m"
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/tty/tty.h:13:9: warning: function-like macro 'GREEN' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define GREEN(c) "\x1b[32m" c "\x1b[0m" 
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/tty/tty.h:14:9: warning: function-like macro 'YELLOW' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define YELLOW(c) "\x1b[93m" c "\x1b[0m"
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/tty/tty.h:15:9: warning: function-like macro 'GRAY' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define GRAY(c) "\x1b[97m" c "\x1b[0m"
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/mm/slab.h:15:9: warning: returning a newly created resource of type 'T *' or 'gsl::owner<>' from a function whose return type is not 'gsl::owner<>' [cppcoreguidelines-owning-memory]
        return new (slab_allocate(sizeof(T))) T;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/process/process.h:27:94: warning: 0xffffffff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        static auto from_int(std::uint64_t value) -> task_id { return {std::uint32_t(value & 0xffffffff), std::uint32_t(value >> 32)}; }
                                                                                             ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/process/process.h:29:79: warning: 0xffffffff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        [[nodiscard]] constexpr auto valid() const -> bool { return thread != 0xffffffff; }
                                                                              ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/process/process.h:63:64: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        auto get_thread(std::uint32_t tid) -> thread* { return threads[tid]; }
                                                               ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/mutex.h:20:13: warning: variable 'guard' of type 'spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
            spinlock_guard guard(internal_spinlock);
            ^
                           const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/mutex.h:32:13: warning: variable 'guard' of type 'spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
            spinlock_guard guard(internal_spinlock);
            ^
                           const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/mutex.h:47:13: warning: variable 'guard' of type 'spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
            spinlock_guard guard(internal_spinlock);
            ^
                           const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync/mutex.h:59:13: warning: variable 'guard' of type 'spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
            spinlock_guard guard(internal_spinlock);
            ^
                           const 
../kernel/include/arch/x86/utils/id_allocator.h:117:41: warning: The result of the left shift is undefined due to shifting by '64', which is greater or equal to the width of type 'unsigned long' [clang-analyzer-core.UndefinedBinaryOperatorResult]
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                        ^
../kernel/src/arch/x86/mm/slab.cpp:88:9: note: Calling 'slab::free'
        BUILTIN_SLABS[slab].free(ptr);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/mm/slab.cpp:40:13: note: Calling 'dynamic_id_allocator::free'
            alloc.free(((std::uintptr_t)buf - (std::uintptr_t)index) / obj_size);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/include/arch/x86/utils/id_allocator.h:117:44: note: Calling 'ceil_logbase2'
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:24:19: note: Assuming the condition is false
        int y = (((x & (x - 1)) == 0) ? 0 : 1);
                  ^~~~~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:24:18: note: '?' condition is false
        int y = (((x & (x - 1)) == 0) ? 0 : 1);
                 ^
../lib/bits/mathhelper.h:28:15: note: Assuming the condition is false
        k = (((x & t[0]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:28:14: note: '?' condition is false
        k = (((x & t[0]) == 0) ? 0 : j);
             ^
../lib/bits/mathhelper.h:33:15: note: Assuming the condition is false
        k = (((x & t[1]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:33:14: note: '?' condition is false
        k = (((x & t[1]) == 0) ? 0 : j);
             ^
../lib/bits/mathhelper.h:38:15: note: Assuming the condition is false
        k = (((x & t[2]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:38:14: note: '?' condition is false
        k = (((x & t[2]) == 0) ? 0 : j);
             ^
../lib/bits/mathhelper.h:43:15: note: Assuming the condition is false
        k = (((x & t[3]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:43:14: note: '?' condition is false
        k = (((x & t[3]) == 0) ? 0 : j);
             ^
../lib/bits/mathhelper.h:48:15: note: Assuming the condition is false
        k = (((x & t[4]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:48:14: note: '?' condition is false
        k = (((x & t[4]) == 0) ? 0 : j);
             ^
../lib/bits/mathhelper.h:51:9: note: The value 1 is assigned to 'j'
        j >>= 1;
        ^~~~~~~
../lib/bits/mathhelper.h:53:15: note: Assuming the condition is false
        k = (((x & t[5]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:53:14: note: '?' condition is false
        k = (((x & t[5]) == 0) ? 0 : j);
             ^
../lib/bits/mathhelper.h:53:9: note: The value 1 is assigned to 'k'
        k = (((x & t[5]) == 0) ? 0 : j);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/bits/mathhelper.h:54:9: note: The value 64 is assigned to 'y'
        y += k;
        ^~~~~~
../lib/bits/mathhelper.h:58:9: note: Returning the value 64 (loaded from 'y')
        return y;
        ^~~~~~~~
../kernel/include/arch/x86/utils/id_allocator.h:117:44: note: Returning from 'ceil_logbase2'
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/include/arch/x86/utils/id_allocator.h:117:41: note: The result of the left shift is undefined due to shifting by '64', which is greater or equal to the width of type 'unsigned long'
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                        ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/mm/slab.cpp:17:11: warning: class 'slab' defines a copy constructor but does not define a destructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
    class slab
          ^
../kernel/src/arch/x86/mm/slab.cpp:24:35: warning: 2 adjacent parameters of 'slab' of similar type ('std::size_t') are easily swapped by mistake [bugprone-easily-swappable-parameters]
        constexpr slab(void* buf, std::size_t len, std::size_t obj_size)
                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/mm/slab.cpp:24:47: note: the first parameter in the range is 'len'
        constexpr slab(void* buf, std::size_t len, std::size_t obj_size)
                                              ^~~
../kernel/src/arch/x86/mm/slab.cpp:24:64: note: the last parameter in the range is 'obj_size'
        constexpr slab(void* buf, std::size_t len, std::size_t obj_size)
                                                               ^~~~~~~~
../kernel/src/arch/x86/mm/slab.cpp:29:19: warning: definition of implicit copy assignment operator for 'slab' is deprecated because it has a user-declared copy constructor [clang-diagnostic-deprecated-copy]
        constexpr slab(const slab& rhs) = default;
                  ^
../kernel/src/arch/x86/mm/slab.cpp:65:32: note: in implicit copy assignment operator for 'mm::slab' first required here
            BUILTIN_SLABS[idx] = slab((void*)(config::get_val<"mmap.start.slab"> + idx * (1 << SLAB_SIZE_ORDER)),
                               ^
../kernel/src/arch/x86/mm/slab.cpp:31:9: warning: constructor does not initialize these fields: size, obj_size [cppcoreguidelines-pro-type-member-init]
        constexpr slab() : alloc(0), buf(nullptr) {}
        ^
../kernel/src/arch/x86/mm/slab.cpp:33:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        void* allocate()
        ~~~~~ ^
        auto             -> void*
../kernel/src/arch/x86/mm/slab.cpp:35:20: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
            return (void*)((std::uintptr_t) buf + obj_size * alloc.allocate());
                   ^
../kernel/src/arch/x86/mm/slab.cpp:35:20: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
../kernel/src/arch/x86/mm/slab.cpp:35:28: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
            return (void*)((std::uintptr_t) buf + obj_size * alloc.allocate());
                           ^
../kernel/src/arch/x86/mm/slab.cpp:40:25: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
            alloc.free(((std::uintptr_t)buf - (std::uintptr_t)index) / obj_size);
                        ^
../kernel/src/arch/x86/mm/slab.cpp:40:47: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
            alloc.free(((std::uintptr_t)buf - (std::uintptr_t)index) / obj_size);
                                              ^
../kernel/src/arch/x86/mm/slab.cpp:43:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        bool in_bounds(void* ptr)
        ~~~~ ^
        auto                      -> bool
../kernel/src/arch/x86/mm/slab.cpp:45:18: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
            auto p = (std::uintptr_t)ptr;
                 ^
../kernel/src/arch/x86/mm/slab.cpp:45:22: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
            auto p = (std::uintptr_t)ptr;
                     ^
../kernel/src/arch/x86/mm/slab.cpp:46:18: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
            auto b = (std::uintptr_t)buf;
                 ^
../kernel/src/arch/x86/mm/slab.cpp:46:22: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
            auto b = (std::uintptr_t)buf;
                     ^
../kernel/src/arch/x86/mm/slab.cpp:56:17: warning: variable 'BUILTIN_SLABS' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static slab BUILTIN_SLABS[MAX_ORDER - MIN_ORDER + 1];
                ^
../kernel/src/arch/x86/mm/slab.cpp:56:17: warning: variable 'BUILTIN_SLABS' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/mm/slab.cpp:62:9: warning: variable 'idx' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t idx = 0;
        ^
                    const 
../kernel/src/arch/x86/mm/slab.cpp:65:13: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
            BUILTIN_SLABS[idx] = slab((void*)(config::get_val<"mmap.start.slab"> + idx * (1 << SLAB_SIZE_ORDER)),
            ^
../kernel/src/arch/x86/mm/slab.cpp:65:39: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
            BUILTIN_SLABS[idx] = slab((void*)(config::get_val<"mmap.start.slab"> + idx * (1 << SLAB_SIZE_ORDER)),
                                      ^
../kernel/src/arch/x86/mm/slab.cpp:65:39: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
../kernel/src/arch/x86/mm/slab.cpp:70:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    void* slab_allocate(std::size_t n)
    ~~~~~ ^
    auto                               -> void*
../kernel/src/arch/x86/mm/slab.cpp:70:37: warning: parameter name 'n' is too short, expected at least 3 characters [readability-identifier-length]
    void* slab_allocate(std::size_t n)
                                    ^
../kernel/src/arch/x86/mm/slab.cpp:72:48: warning: narrowing conversion from 'std::size_t' (aka 'unsigned long') to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        std::size_t order = std::ceil_logbase2(n);
                                               ^
../kernel/src/arch/x86/mm/slab.cpp:81:16: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        return BUILTIN_SLABS[order - MIN_ORDER].allocate();
               ^
../kernel/src/arch/x86/mm/slab.cpp:86:9: warning: variable 'p' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uintptr_t p = (std::uintptr_t)ptr;
        ^
                       const 
../kernel/src/arch/x86/mm/slab.cpp:86:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
        std::uintptr_t p = (std::uintptr_t)ptr;
        ^~~~~~~~~~~~~~
        auto
../kernel/src/arch/x86/mm/slab.cpp:86:24: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
        std::uintptr_t p = (std::uintptr_t)ptr;
                       ^
../kernel/src/arch/x86/mm/slab.cpp:86:28: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
        std::uintptr_t p = (std::uintptr_t)ptr;
                           ^
../kernel/src/arch/x86/mm/slab.cpp:88:9: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        BUILTIN_SLABS[slab].free(ptr);
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/gdt/gdt.h:54:40: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            base_mid = as_uptr(ist) >> 24;
                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/pgfault.h:8:10: warning: function 'handle_page_fault' defined in a header file; function definitions in header files can lead to ODR violations [misc-definitions-in-headers]
    void handle_page_fault(std::uint64_t id, void* stackpointer)
         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/pgfault.h:8:10: note: make as 'inline'
    void handle_page_fault(std::uint64_t id, void* stackpointer)
         ^
    inline 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/pgfault.h:8:42: warning: parameter 'id' is unused [misc-unused-parameters]
    void handle_page_fault(std::uint64_t id, void* stackpointer)
                                         ^~
                                          /*id*/
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/pgfault.h:8:42: warning: parameter name 'id' is too short, expected at least 3 characters [readability-identifier-length]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/pgfault.h:8:52: warning: parameter 'stackpointer' is unused [misc-unused-parameters]
    void handle_page_fault(std::uint64_t id, void* stackpointer)
                                                   ^~~~~~~~~~~~
                                                    /*stackpointer*/
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/acpi/acpi.h:182:9: warning: variable 'tables' of type 'std::span<const acpi_sdt_header *>' can be declared 'const' [misc-const-correctness]
        std::span<const acpi_sdt_header*> tables(table->table, (table->h.length - sizeof(acpi_sdt_header)) / sizeof(acpi_sdt_header*));
        ^
                                          const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/acpi/acpi.h:182:50: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        std::span<const acpi_sdt_header*> tables(table->table, (table->h.length - sizeof(acpi_sdt_header)) / sizeof(acpi_sdt_header*));
                                                 ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/mm/mm.h:13:11: warning: class 'bitmask_allocator' defines a copy constructor but does not define a destructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
    class bitmask_allocator
          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/mm/mm.h:18:118: warning: 63 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        static constexpr auto metadata_size_pages(std::size_t size) -> std::size_t { return std::div_roundup((size + 63) & ~63, 4096ul); }
                                                                                                                     ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/mm/mm.h:18:125: warning: 63 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        static constexpr auto metadata_size_pages(std::size_t size) -> std::size_t { return std::div_roundup((size + 63) & ~63, 4096ul); }
                                                                                                                            ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/mm/mm.h:18:129: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
        static constexpr auto metadata_size_pages(std::size_t size) -> std::size_t { return std::div_roundup((size + 63) & ~63, 4096ul); }
                                                                                                                                ^   ~~
                                                                                                                                    UL
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging_entries.h:30:71: warning: 59 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return (table & ~MASK_PROT_KEY) | ((((std::uint64_t)table) << 59) & MASK_PROT_KEY);
                                                                      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging_entries.h:58:42: warning: 63 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            ((std::uint64_t) !flags.x << 63) |
                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging_entries.h:68:42: warning: 63 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            ((std::uint64_t) !flags.x << 63) |
                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging_entries.h:70:39: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            ((flags.cache) & 0b100 << 7) |
                                      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging_entries.h:80:42: warning: 63 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            ((std::uint64_t) !flags.x << 63) |
                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging_entries.h:82:39: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            ((flags.cache) & 0b100 << 12) |
                                      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging_entries.h:92:42: warning: 63 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            ((std::uint64_t) !flags.x << 63) |
                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging_entries.h:94:39: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            ((flags.cache) & 0b100 << 12) |
                                      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/mm/pmm.h:17:13: warning: variable 'val' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::size_t val = bitmask_allocator::allocate(len);
            ^
                        const 
../kernel/src/arch/x86/mm/vmm.cpp:25:27: warning: variable 'root' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        vmm_block_header* root = nullptr;
                          ^
../kernel/src/arch/x86/mm/vmm.cpp:25:27: warning: variable 'root' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
../kernel/src/arch/x86/mm/vmm.cpp:26:27: warning: variable 'last' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        vmm_block_header* last = nullptr;
                          ^
../kernel/src/arch/x86/mm/vmm.cpp:26:27: warning: variable 'last' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
../kernel/src/arch/x86/mm/vmm.cpp:27:21: warning: variable 'malloced_bytes' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        std::size_t malloced_bytes = 0;
                    ^
../kernel/src/arch/x86/mm/vmm.cpp:38:9: warning: 1st argument 'val' (passed to 'flag') looks like it might be swapped with the 2nd, 'is_free' (passed to 'val') [readability-suspicious-call-argument]
        std::set_bit<0>(val, is_free);
        ^               ~~~  ~~~~~~~
../lib/include/bitmanip.h:11:20: note: in the call to 'set_bit<(unsigned char)'\x00'>', declared here
    constexpr void set_bit(uint64_t& flag, bool val = true)
                   ^                 ~~~~       ~~~
../kernel/src/arch/x86/mm/vmm.cpp:46:87: error: expected '(' for function-style cast or type construction [clang-diagnostic-error]
        root = last = new vmm_block_header { nullptr, nullptr, config::get<"vmm-size">, config::get<"mmap.start.vmm">, make_flags(true) };
                                                               ~~~~~~~~~~~~~~~~~~~~~~~^
../kernel/src/arch/x86/mm/vmm.cpp:46:118: error: expected '(' for function-style cast or type construction [clang-diagnostic-error]
        root = last = new vmm_block_header { nullptr, nullptr, config::get<"vmm-size">, config::get<"mmap.start.vmm">, make_flags(true) };
                                                                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
../kernel/src/arch/x86/mm/vmm.cpp:67:21: warning: initializing non-owner 'vmm_block_header *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
                    auto* next_block = new vmm_block_header{hdr, hdr->next, hdr->size - size, hdr->data + size, make_flags(true)};
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/mm/vmm.cpp:83:24: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
                return (void*)hdr->data;
                       ^
../kernel/src/arch/x86/mm/vmm.cpp:83:24: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:8:7: warning: class 'id_allocator' defines a default destructor, a copy constructor and a copy assignment operator but does not define a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class id_allocator
      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:46:7: warning: class 'dynamic_id_allocator' defines a copy constructor but does not define a destructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class dynamic_id_allocator
      ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:53:32: warning: The result of the left shift is undefined due to shifting by '64', which is greater or equal to the width of type 'unsigned long' [clang-analyzer-core.UndefinedBinaryOperatorResult]
        std::size_t meta = 1UL << std::ceil_logbase2(len);
                               ^  ~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:53:35: note: Calling 'ceil_logbase2'
        std::size_t meta = 1UL << std::ceil_logbase2(len);
                                  ^~~~~~~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:24:19: note: Assuming the condition is false
        int y = (((x & (x - 1)) == 0) ? 0 : 1);
                  ^~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:24:18: note: '?' condition is false
        int y = (((x & (x - 1)) == 0) ? 0 : 1);
                 ^
../lib/include/../bits/mathhelper.h:28:15: note: Assuming the condition is false
        k = (((x & t[0]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:28:14: note: '?' condition is false
        k = (((x & t[0]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:33:15: note: Assuming the condition is false
        k = (((x & t[1]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:33:14: note: '?' condition is false
        k = (((x & t[1]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:38:15: note: Assuming the condition is false
        k = (((x & t[2]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:38:14: note: '?' condition is false
        k = (((x & t[2]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:43:15: note: Assuming the condition is false
        k = (((x & t[3]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:43:14: note: '?' condition is false
        k = (((x & t[3]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:48:15: note: Assuming the condition is false
        k = (((x & t[4]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:48:14: note: '?' condition is false
        k = (((x & t[4]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:51:9: note: The value 1 is assigned to 'j'
        j >>= 1;
        ^~~~~~~
../lib/include/../bits/mathhelper.h:53:15: note: Assuming the condition is false
        k = (((x & t[5]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:53:14: note: '?' condition is false
        k = (((x & t[5]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:53:9: note: The value 1 is assigned to 'k'
        k = (((x & t[5]) == 0) ? 0 : j);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:54:9: note: The value 64 is assigned to 'y'
        y += k;
        ^~~~~~
../lib/include/../bits/mathhelper.h:58:9: note: Returning the value 64 (loaded from 'y')
        return y;
        ^~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:53:35: note: Returning from 'ceil_logbase2'
        std::size_t meta = 1UL << std::ceil_logbase2(len);
                                  ^~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:53:32: note: The result of the left shift is undefined due to shifting by '64', which is greater or equal to the width of type 'unsigned long'
        std::size_t meta = 1UL << std::ceil_logbase2(len);
                               ^  ~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:53:54: warning: narrowing conversion from 'std::size_t' (aka 'unsigned long') to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        std::size_t meta = 1UL << std::ceil_logbase2(len);
                                                     ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:55:57: warning: narrowing conversion from 'std::size_t' (aka 'unsigned long') to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        for (std::size_t i = 0; i <= std::ceil_logbase2(len); i++)
                                                        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:59:41: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
            for (std::size_t j = 0; j < 1ul << i; j++)
                                        ^~~
                                         UL
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:102:9: warning: variable 'ret' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t ret = index - ((1UL << std::ceil_logbase2(bits.size())) - 1);
        ^
                    const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:102:41: warning: The result of the left shift is undefined due to shifting by '64', which is greater or equal to the width of type 'unsigned long' [clang-analyzer-core.UndefinedBinaryOperatorResult]
        std::size_t ret = index - ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                        ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:80:9: note: Taking false branch
        if (!bits.test(0))
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:85:9: note: Loop condition is true.  Entering loop body
        while (true)
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:87:17: note: Assuming the condition is true
            if (2 * index + 1 >= bits.size())
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:87:13: note: Taking true branch
            if (2 * index + 1 >= bits.size())
            ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:89:17: note:  Execution continues on line 101
                break;
                ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:102:44: note: Calling 'ceil_logbase2'
        std::size_t ret = index - ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:24:19: note: Assuming the condition is false
        int y = (((x & (x - 1)) == 0) ? 0 : 1);
                  ^~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:24:18: note: '?' condition is false
        int y = (((x & (x - 1)) == 0) ? 0 : 1);
                 ^
../lib/include/../bits/mathhelper.h:28:15: note: Assuming the condition is false
        k = (((x & t[0]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:28:14: note: '?' condition is false
        k = (((x & t[0]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:33:15: note: Assuming the condition is false
        k = (((x & t[1]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:33:14: note: '?' condition is false
        k = (((x & t[1]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:38:15: note: Assuming the condition is false
        k = (((x & t[2]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:38:14: note: '?' condition is false
        k = (((x & t[2]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:43:15: note: Assuming the condition is false
        k = (((x & t[3]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:43:14: note: '?' condition is false
        k = (((x & t[3]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:48:15: note: Assuming the condition is false
        k = (((x & t[4]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:48:14: note: '?' condition is false
        k = (((x & t[4]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:51:9: note: The value 1 is assigned to 'j'
        j >>= 1;
        ^~~~~~~
../lib/include/../bits/mathhelper.h:53:15: note: Assuming the condition is false
        k = (((x & t[5]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:53:14: note: '?' condition is false
        k = (((x & t[5]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:53:9: note: The value 1 is assigned to 'k'
        k = (((x & t[5]) == 0) ? 0 : j);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:54:9: note: The value 64 is assigned to 'y'
        y += k;
        ^~~~~~
../lib/include/../bits/mathhelper.h:58:9: note: Returning the value 64 (loaded from 'y')
        return y;
        ^~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:102:44: note: Returning from 'ceil_logbase2'
        std::size_t ret = index - ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:102:41: note: The result of the left shift is undefined due to shifting by '64', which is greater or equal to the width of type 'unsigned long'
        std::size_t ret = index - ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                        ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:102:63: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        std::size_t ret = index - ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                                              ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:117:41: warning: The result of the left shift is undefined due to shifting by '64', which is greater or equal to the width of type 'unsigned long' [clang-analyzer-core.UndefinedBinaryOperatorResult]
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                        ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:117:44: note: Calling 'ceil_logbase2'
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:24:19: note: Assuming the condition is false
        int y = (((x & (x - 1)) == 0) ? 0 : 1);
                  ^~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:24:18: note: '?' condition is false
        int y = (((x & (x - 1)) == 0) ? 0 : 1);
                 ^
../lib/include/../bits/mathhelper.h:28:15: note: Assuming the condition is false
        k = (((x & t[0]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:28:14: note: '?' condition is false
        k = (((x & t[0]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:33:15: note: Assuming the condition is false
        k = (((x & t[1]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:33:14: note: '?' condition is false
        k = (((x & t[1]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:38:15: note: Assuming the condition is false
        k = (((x & t[2]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:38:14: note: '?' condition is false
        k = (((x & t[2]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:43:15: note: Assuming the condition is false
        k = (((x & t[3]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:43:14: note: '?' condition is false
        k = (((x & t[3]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:48:15: note: Assuming the condition is false
        k = (((x & t[4]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:48:14: note: '?' condition is false
        k = (((x & t[4]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:51:9: note: The value 1 is assigned to 'j'
        j >>= 1;
        ^~~~~~~
../lib/include/../bits/mathhelper.h:53:15: note: Assuming the condition is false
        k = (((x & t[5]) == 0) ? 0 : j);
              ^~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:53:14: note: '?' condition is false
        k = (((x & t[5]) == 0) ? 0 : j);
             ^
../lib/include/../bits/mathhelper.h:53:9: note: The value 1 is assigned to 'k'
        k = (((x & t[5]) == 0) ? 0 : j);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../lib/include/../bits/mathhelper.h:54:9: note: The value 64 is assigned to 'y'
        y += k;
        ^~~~~~
../lib/include/../bits/mathhelper.h:58:9: note: Returning the value 64 (loaded from 'y')
        return y;
        ^~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:117:44: note: Returning from 'ceil_logbase2'
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:117:41: note: The result of the left shift is undefined due to shifting by '64', which is greater or equal to the width of type 'unsigned long'
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                        ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/utils/id_allocator.h:117:63: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        std::size_t index = idx + ((1UL << std::ceil_logbase2(bits.size())) - 1);
                                                              ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:26:58: warning: parameter name 'pt' is too short, expected at least 3 characters [readability-identifier-length]
    auto map_page_for(page_table_entry* table, page_type pt, std::uintptr_t virtual_addr, std::uintptr_t physical_addr, page_prop prop, bool overwrite) -> bool;
                                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:27:33: warning: parameter name 'pt' is too short, expected at least 3 characters [readability-identifier-length]
    auto request_page(page_type pt, std::uint64_t vaddr, std::uint64_t paddr, page_prop prop = {}, bool overwrite = false) -> bool;
                                ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:34:40: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits<(3 - t) * 9 + 12, (3 - t) * 9 + 20>(virtual_addr) >> ((3 - t) * 9 + 12);
                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:34:44: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits<(3 - t) * 9 + 12, (3 - t) * 9 + 20>(virtual_addr) >> ((3 - t) * 9 + 12);
                                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:34:58: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits<(3 - t) * 9 + 12, (3 - t) * 9 + 20>(virtual_addr) >> ((3 - t) * 9 + 12);
                                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:34:62: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits<(3 - t) * 9 + 12, (3 - t) * 9 + 20>(virtual_addr) >> ((3 - t) * 9 + 12);
                                                             ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:34:94: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits<(3 - t) * 9 + 12, (3 - t) * 9 + 20>(virtual_addr) >> ((3 - t) * 9 + 12);
                                                                                             ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:34:98: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits<(3 - t) * 9 + 12, (3 - t) * 9 + 20>(virtual_addr) >> ((3 - t) * 9 + 12);
                                                                                                 ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:37:76: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
    constexpr auto get_page_entry(std::uint64_t virtual_addr, std::uint8_t t) -> std::uint16_t
                                                                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:39:54: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits(virtual_addr, (3 - t) * 9 + 12, (3 - t) * 9 + 20) >> ((3 - t) * 9 + 12);
                                                     ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:39:58: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits(virtual_addr, (3 - t) * 9 + 12, (3 - t) * 9 + 20) >> ((3 - t) * 9 + 12);
                                                         ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:39:72: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits(virtual_addr, (3 - t) * 9 + 12, (3 - t) * 9 + 20) >> ((3 - t) * 9 + 12);
                                                                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:39:76: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits(virtual_addr, (3 - t) * 9 + 12, (3 - t) * 9 + 20) >> ((3 - t) * 9 + 12);
                                                                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:39:94: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits(virtual_addr, (3 - t) * 9 + 12, (3 - t) * 9 + 20) >> ((3 - t) * 9 + 12);
                                                                                             ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:39:98: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        return std::get_bits(virtual_addr, (3 - t) * 9 + 12, (3 - t) * 9 + 20) >> ((3 - t) * 9 + 12);
                                                                                                 ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:42:41: warning: parameter name 'pt' is too short, expected at least 3 characters [readability-identifier-length]
    inline auto map_hhdm_phys(page_type pt, std::uint64_t paddr, page_prop prop = {}, bool overwrite = false) -> bool
                                        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/paging/paging.h:47:41: warning: parameter name 'pt' is too short, expected at least 3 characters [readability-identifier-length]
    inline auto map_hhdm_virt(page_type pt, std::uint64_t vaddr, page_prop prop = {}, bool overwrite = false) -> bool
                                        ^
../kernel/src/arch/x86/mm/pmm.cpp:15:43: warning: variable 'region' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        std::array<pmm_region, PMM_COUNT> region;
                                          ^
../kernel/src/arch/x86/mm/pmm.cpp:16:33: warning: variable 'meta_allocator' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        id_allocator<PMM_COUNT> meta_allocator;
                                ^
../kernel/src/arch/x86/mm/pmm.cpp:17:24: warning: variable 'pmm_alloc_lock' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        lock::spinlock pmm_alloc_lock;
                       ^
../kernel/src/arch/x86/mm/pmm.cpp:39:9: warning: variable 'g' of type 'lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        lock::spinlock_guard g(pmm_alloc_lock);
        ^
                             const 
../kernel/src/arch/x86/mm/pmm.cpp:39:30: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
        lock::spinlock_guard g(pmm_alloc_lock);
                             ^
../kernel/src/arch/x86/mm/pmm.cpp:47:9: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        region[index] = pmm_region(start, len);
        ^
../kernel/src/arch/x86/mm/pmm.cpp:54:13: warning: variable 'guard' of type 'lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
            lock::spinlock_guard guard(pmm_alloc_lock);
            ^
                                 const 
../kernel/src/arch/x86/mm/pmm.cpp:55:17: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
            if (region[i].exists())
                ^
../kernel/src/arch/x86/mm/pmm.cpp:57:28: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                auto ptr = region[i].allocate(len);
                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/smp/smp.h:17:11: warning: constructor does not initialize these fields: ctxbuffer, idt_handler_entries, idt_entries, core_id, pagemap, ist, current_thread [cppcoreguidelines-pro-type-member-init]
    class core_local
          ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/smp/smp.h:17:11: warning: class 'core_local' defines a copy constructor, a copy assignment operator, a move constructor and a move assignment operator but does not define a destructor [cppcoreguidelines-special-member-functions]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/smp/smp.h:19:48: warning: variable 'entries' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        inline static gsl::owner<core_local**> entries = nullptr;
                                               ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/smp/smp.h:23:9: warning: member variable of type 'gsl::owner<>' requires the class 'core_local' to implement a destructor to release the owned resource [cppcoreguidelines-owning-memory]
        gsl::owner<proc::context*> ctxbuffer;
        ^
../kernel/src/arch/x86/smp/smp.cpp:29:13: warning: assigning newly created 'gsl::owner<>' to non-owner 'smp::core_local *' [cppcoreguidelines-owning-memory]
            entries[i] = new core_local;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/smp/smp.cpp:37:13: warning: variable '__guard1' of type '::lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
            SPINLOCK_SYNC_BLOCK;
            ^
../kernel/include/arch/x86/sync/spinlock.h:56:29: note: expanded from macro 'SPINLOCK_SYNC_BLOCK'
#define SPINLOCK_SYNC_BLOCK _SPINLOCK_SYNC_BLOCK(__COUNTER__)
                            ^
../kernel/include/arch/x86/sync/spinlock.h:54:5: note: expanded from macro '_SPINLOCK_SYNC_BLOCK'
    ::lock::spinlock_guard CONCAT(__guard, n) { CONCAT(__lock, n) }
    ^
../kernel/src/arch/x86/smp/smp.cpp:38:13: warning: variable 'base' of type 'std::uint64_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::uint64_t base = local.apic.get_apic_base();
            ^
                          const 
../kernel/src/arch/x86/smp/smp.cpp:42:101: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            local.apic.set_tick(idt::register_idt(idt::idt_builder(handlers::handle_timer).ist(1)), 20);
                                                                                                    ^
../kernel/src/arch/x86/smp/smp.cpp:110:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            std::memcpy(code_buf, simple_init_instr, sizeof(simple_init_instr));
                                  ^
../kernel/src/arch/x86/smp/smp.cpp:118:13: warning: variable 'cr3' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::uintptr_t cr3 = info->extra_argument & ~0xfff;
            ^
                           const 
../kernel/src/arch/x86/smp/smp.cpp:118:58: warning: 0xfff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            std::uintptr_t cr3 = info->extra_argument & ~0xfff;
                                                         ^
../kernel/src/arch/x86/smp/smp.cpp:119:13: warning: variable 'core_id' of type 'std::uintptr_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::uintptr_t core_id = info->extra_argument & 0xfff;
            ^
                           const 
../kernel/src/arch/x86/smp/smp.cpp:119:61: warning: 0xfff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            std::uintptr_t core_id = info->extra_argument & 0xfff;
                                                            ^
../kernel/src/arch/x86/smp/smp.cpp:129:65: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            wrmsr(msr::IA32_EFER, rdmsr(msr::IA32_EFER) | (1 << 11));
                                                                ^
../kernel/src/arch/x86/smp/smp.cpp:158:57: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                if (!idt::register_idt(idt::idt_builder(handlers::INTERRUPT_HANDLERS[i]).ist(1), i))
                                                        ^
../kernel/src/arch/x86/smp/smp.cpp:183:52: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
                        if (last_interrupt_count + 50 < local.timer_tick_count)
                                                   ^
../kernel/src/arch/x86/smp/smp.cpp:206:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::printf("init_smp(): bootstrap_processor_id=%u\n", smp->bsp_lapic_id);
        ^
../kernel/src/arch/x86/smp/smp.cpp:207:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::printf("  cpus: %lu\n", smp->cpu_count);
        ^
../kernel/src/arch/x86/smp/smp.cpp:213:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            if (smp->bsp_lapic_id == smp->cpus[i]->lapic_id)
                                     ^
../kernel/src/arch/x86/smp/smp.cpp:216:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                smp->cpus[i]->extra_argument = as_uptr(smp::core_local::get(0).pagemap);
                ^
../kernel/src/arch/x86/smp/smp.cpp:225:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            smp->cpus[i]->extra_argument =
            ^
../kernel/src/arch/x86/smp/smp.cpp:229:64: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            stdext::direct_atomic_store(as_ptr<std::uint64_t>(&smp->cpus[i]->goto_address), as_uptr(smp::main_wrapper), std::memory_order_seq_cst);
                                                               ^
../kernel/src/arch/x86/smp/smp.cpp:234:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        smp::smp_main(smp->cpus[bsp_index]);
                      ^
../kernel/include/arch/x86/paging/paging.h:27:10: warning: function 'paging::request_page' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    auto request_page(page_type pt, std::uint64_t vaddr, std::uint64_t paddr, page_prop prop = {}, bool overwrite = false) -> bool;
         ^
../kernel/src/arch/x86/paging/paging.cpp:67:10: note: the definition seen here
    auto request_page(page_type pt, std::uintptr_t virtual_addr, std::uintptr_t physical_addr, page_prop prop, bool overwrite) -> bool
         ^
../kernel/include/arch/x86/paging/paging.h:27:10: note: differing parameters are named here: ('vaddr', 'paddr'), in definition: ('virtual_addr', 'physical_addr')
    auto request_page(page_type pt, std::uint64_t vaddr, std::uint64_t paddr, page_prop prop = {}, bool overwrite = false) -> bool;
         ^
../kernel/src/arch/x86/paging/paging.cpp:9:9: warning: function-like macro 'GET_VIRTUAL_POS' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage]
#define GET_VIRTUAL_POS(n) get_bits<(4 - n) * 9 + 12, (4 - n) * 9 + 20>(VIRT_LOAD_POSITION)
        ^
../kernel/src/arch/x86/paging/paging.cpp:9:42: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define GET_VIRTUAL_POS(n) get_bits<(4 - n) * 9 + 12, (4 - n) * 9 + 20>(VIRT_LOAD_POSITION)
                                         ^
                                         ()
../kernel/src/arch/x86/paging/paging.cpp:9:60: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define GET_VIRTUAL_POS(n) get_bits<(4 - n) * 9 + 12, (4 - n) * 9 + 20>(VIRT_LOAD_POSITION)
                                                           ^
                                                           ()
../kernel/src/arch/x86/paging/paging.cpp:21:27: warning: variable 'paging_global_lock' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
    static lock::spinlock paging_global_lock;
                          ^
../kernel/src/arch/x86/paging/paging.cpp:21:27: warning: variable 'paging_global_lock' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
../kernel/src/arch/x86/paging/paging.cpp:23:58: warning: parameter name 'pt' is too short, expected at least 3 characters [readability-identifier-length]
    auto map_page_for(page_table_entry* table, page_type pt, std::uintptr_t virtual_addr, std::uintptr_t physical_addr, page_prop prop,
                                                         ^
../kernel/src/arch/x86/paging/paging.cpp:23:62: warning: 2 adjacent parameters of 'map_page_for' of similar type ('std::uintptr_t') are easily swapped by mistake [bugprone-easily-swappable-parameters]
    auto map_page_for(page_table_entry* table, page_type pt, std::uintptr_t virtual_addr, std::uintptr_t physical_addr, page_prop prop,
                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/paging/paging.cpp:23:77: note: the first parameter in the range is 'virtual_addr'
    auto map_page_for(page_table_entry* table, page_type pt, std::uintptr_t virtual_addr, std::uintptr_t physical_addr, page_prop prop,
                                                                            ^~~~~~~~~~~~
../kernel/src/arch/x86/paging/paging.cpp:23:106: note: the last parameter in the range is 'physical_addr'
    auto map_page_for(page_table_entry* table, page_type pt, std::uintptr_t virtual_addr, std::uintptr_t physical_addr, page_prop prop,
                                                                                                         ^~~~~~~~~~~~~
../kernel/src/arch/x86/paging/paging.cpp:26:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        virtual_addr &= ~type2align[pt];
                         ^
../kernel/src/arch/x86/paging/paging.cpp:27:27: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        physical_addr &= ~type2align[pt];
                          ^
../kernel/src/arch/x86/paging/paging.cpp:32:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            std::uint64_t& entry = current_entry[get_page_entry(virtual_addr, i)];
                                   ^
../kernel/src/arch/x86/paging/paging.cpp:43:64: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            current_entry = mm::make_virtual<page_table_entry>(current_entry[get_page_entry(virtual_addr, i)] & MASK_TABLE_POINTER);
                                                               ^
../kernel/src/arch/x86/paging/paging.cpp:46:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        current_entry += get_page_entry(virtual_addr, 3 - pt);
                      ^
../kernel/src/arch/x86/paging/paging.cpp:67:33: warning: parameter name 'pt' is too short, expected at least 3 characters [readability-identifier-length]
    auto request_page(page_type pt, std::uintptr_t virtual_addr, std::uintptr_t physical_addr, page_prop prop, bool overwrite) -> bool
                                ^
../kernel/src/arch/x86/paging/paging.cpp:69:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        virtual_addr &= ~type2align[pt];
                         ^
../kernel/src/arch/x86/paging/paging.cpp:70:27: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        physical_addr &= ~type2align[pt];
                          ^
../kernel/src/arch/x86/paging/paging.cpp:72:9: warning: variable 'guard' of type 'lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        lock::spinlock_guard guard(paging_global_lock);
        ^
                             const 
../kernel/src/arch/x86/paging/paging.cpp:85:9: warning: variable 'guard' of type 'lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        lock::spinlock_guard guard(paging_global_lock);
        ^
                             const 
../kernel/src/arch/x86/paging/paging.cpp:86:9: warning: variable 'index' of type 'std::uint16_t' (aka 'unsigned short') can be declared 'const' [misc-const-correctness]
        std::uint16_t index = paging::get_page_entry<3>(virtual_addr);
        ^
                      const 
../kernel/src/arch/x86/paging/paging.cpp:87:9: warning: variable 'value' of type 'std::uint64_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::uint64_t value = smp::core_local::get().pagemap[index];
        ^
                      const 
../kernel/src/arch/x86/paging/paging.cpp:87:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        std::uint64_t value = smp::core_local::get().pagemap[index];
                              ^
../kernel/src/arch/x86/paging/paging.cpp:91:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            smp::core_local::get(i).pagemap[index] = value;
            ^
../kernel/src/arch/x86/paging/paging.cpp:95:22: warning: 2 adjacent parameters of 'map_section' of similar type are easily swapped by mistake [bugprone-easily-swappable-parameters]
    void map_section(std::uintptr_t addr, std::size_t length, paging::page_prop prop)
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/paging/paging.cpp:95:37: note: the first parameter in the range is 'addr'
    void map_section(std::uintptr_t addr, std::size_t length, paging::page_prop prop)
                                    ^~~~
../kernel/src/arch/x86/paging/paging.cpp:95:55: note: the last parameter in the range is 'length'
    void map_section(std::uintptr_t addr, std::size_t length, paging::page_prop prop)
                                                      ^~~~~~
../kernel/src/arch/x86/paging/paging.cpp:95:22: note: after resolving type aliases, the common type of 'std::uintptr_t' and 'std::size_t' is 'unsigned long'
    void map_section(std::uintptr_t addr, std::size_t length, paging::page_prop prop)
                     ^
../kernel/src/arch/x86/paging/paging.cpp:97:30: warning: narrowing conversion from 'std::size_t' (aka 'unsigned long') to signed type 'std::int64_t' (aka 'long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        std::int64_t pages = length / PAGE_SMALL_SIZE;
                             ^
../kernel/src/arch/x86/paging/paging.cpp:109:23: warning: comparison of integers of different signs: 'std::int64_t' (aka 'long') and 'const std::size_t' (aka 'const unsigned long') [clang-diagnostic-sign-compare]
        while ((pages >= PAGE_MEDIUM_TO_SMALL_RATIO) && (addr % paging::PAGE_LARGE_SIZE))
                ~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/paging/paging.cpp:117:22: warning: comparison of integers of different signs: 'std::int64_t' (aka 'long') and 'const std::size_t' (aka 'const unsigned long') [clang-diagnostic-sign-compare]
        while (pages >= PAGE_LARGE_TO_SMALL_RATIO)
               ~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/paging/paging.cpp:124:22: warning: comparison of integers of different signs: 'std::int64_t' (aka 'long') and 'const std::size_t' (aka 'const unsigned long') [clang-diagnostic-sign-compare]
        while (pages >= PAGE_MEDIUM_TO_SMALL_RATIO)
               ~~~~~ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~
../kernel/src/arch/x86/paging/paging.cpp:140:61: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        wrmsr(msr::IA32_EFER, rdmsr(msr::IA32_EFER) | (1 << 11));
                                                            ^
../kernel/src/arch/x86/paging/paging.cpp:143:9: warning: variable 'kernel_pages' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t kernel_pages = std::div_roundup(boot_resource::instance().kernel_size(), paging::PAGE_SMALL_SIZE);
        ^
                    const 
../kernel/src/arch/x86/paging/paging.cpp:147:13: warning: variable 'vaddr' of type 'std::uint64_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::uint64_t vaddr = config::get_val<"mmap.start.kernel"> + i * paging::PAGE_SMALL_SIZE;
            ^
                          const 
../kernel/src/arch/x86/paging/paging.cpp:151:37: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        for (std::size_t i = 0; i < 10; i++)
                                    ^
../kernel/src/arch/x86/paging/paging.cpp:153:13: warning: variable 'vaddr' of type 'std::uint64_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            std::uint64_t vaddr = 0xffffffff90000000 + i * paging::PAGE_SMALL_SIZE;
            ^
                          const 
../kernel/src/arch/x86/paging/paging.cpp:153:35: warning: 0xffffffff90000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
            std::uint64_t vaddr = 0xffffffff90000000 + i * paging::PAGE_SMALL_SIZE;
                                  ^
../kernel/src/arch/x86/paging/paging.cpp:157:78: warning: parameter name 'e' is too short, expected at least 3 characters [readability-identifier-length]
        boot_resource::instance().iterate_mmap([](const limine_memmap_entry& e) {
                                                                             ^
../kernel/src/arch/x86/paging/paging.cpp:200:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        std::memcpy(dest + 256, src + 256, 256 * sizeof(paging::page_table_entry));
                         ^
../kernel/src/arch/x86/paging/paging.cpp:200:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        std::memcpy(dest + 256, src + 256, 256 * sizeof(paging::page_table_entry));
                                    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:12:5: warning: do not use unnamed namespaces in header files [cert-dcl59-cpp]
    namespace 
    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:14:28: warning: static variable 'start' may be dynamically initialized in this header file [bugprone-dynamic-static-initializers]
        extern std::size_t start, end;
                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:14:28: warning: variable 'start' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:14:35: warning: static variable 'end' may be dynamically initialized in this header file [bugprone-dynamic-static-initializers]
        extern std::size_t start, end;
                                  ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:14:35: warning: variable 'end' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:15:24: warning: variable 'lock' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
        lock::spinlock lock;
                       ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:15:24: warning: variable 'lock' defined in a header file; variable definitions in header files can lead to ODR violations [misc-definitions-in-headers]
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:21:9: warning: variable 'guard' of type 'lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        lock::spinlock_guard guard(lock);
        ^
                             const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:22:9: warning: variable 'len1' of type 'std::size_t' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        std::size_t len1 = std::printf("[%lu] ", smp::core_local::get().core_id);
        ^
                    const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:22:28: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::size_t len1 = std::printf("[%lu] ", smp::core_local::get().core_id);
                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:23:28: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::size_t len2 = std::printf(fmt, args...);
                           ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:31:9: warning: variable 'g' of type 'lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        lock::spinlock_guard g(lock);
        ^
                             const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:31:30: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
        lock::spinlock_guard g(lock);
                             ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:32:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::printf("[%lu] ", smp::core_local::get().core_id);
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:39:9: warning: variable 'guard' of type 'lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        lock::spinlock_guard guard(lock);
        ^
                             const 
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/klog/klog.h:40:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        std::printf("[%lu] ", smp::core_local::get().core_id);
        ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync_wrappers.h:14:9: warning: variable '__guard0' of type '::lock::spinlock_guard' (aka 'lock_guard<spinlock>') can be declared 'const' [misc-const-correctness]
        SPINLOCK_SYNC_BLOCK;
        ^
../kernel/include/arch/x86/sync/spinlock.h:56:29: note: expanded from macro 'SPINLOCK_SYNC_BLOCK'
#define SPINLOCK_SYNC_BLOCK _SPINLOCK_SYNC_BLOCK(__COUNTER__)
                            ^
../kernel/include/arch/x86/sync/spinlock.h:54:5: note: expanded from macro '_SPINLOCK_SYNC_BLOCK'
    ::lock::spinlock_guard CONCAT(__guard, n) { CONCAT(__lock, n) }
    ^
/home/flowey/dev/kernel-dev/kernel/kernel/include/arch/x86/sync_wrappers.h:15:16: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
        return std::printf(fmt, args...);
               ^
