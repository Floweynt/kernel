.text

.global idt_entry_start
.global idt_entry_end
.global _handle_irq_common
.global return_to_context
idt_common:
    cld
    pushq %rax
    pushq %rbx

    xorq %rbx, %rbx
    cmp 0x40(%rsp), %rbx
#    jne .L0
#    swapgs
#.L0:

    movq %gs:0, %rbx
    movq (%rbx), %rbx
    
    // save rcx to use for storing other values
    movq %rcx, (0x28 + 0x8 * 2)(%rbx)
    
    // save the top of the stack (%rbx)
    popq %rcx
    movq %rcx, (0x28 + 0x8 * 1)(%rbx)

    // save the top of the stack (is now %rax)
    popq %rcx
    movq %rcx, (0x28 + 0x8 * 0)(%rbx) 

    // save rdx-r15 and rbp
    movq %rdx, (0x28 + 0x8 * 3)(%rbx)
    movq %rsi, (0x28 + 0x8 * 4)(%rbx)
    movq %rdi, (0x28 + 0x8 * 5)(%rbx)
    movq %r8, (0x28 + 0x8 * 6)(%rbx)
    movq %r9, (0x28 + 0x8 * 7)(%rbx)
    movq %r10, (0x28 + 0x8 * 8)(%rbx)
    movq %r11, (0x28 + 0x8 * 9)(%rbx)
    movq %r12, (0x28 + 0x8 * 10)(%rbx)
    movq %r13, (0x28 + 0x8 * 11)(%rbx)
    movq %r14, (0x28 + 0x8 * 12)(%rbx)
    movq %r15, (0x28 + 0x8 * 13)(%rbx)
    movq %rbp, (0x28 + 0x8 * 14)(%rbx)
 
    // setup arguments argument 0 (int number)
    popq %rdi
    popq %rsi

    // save rip
    movq (%rsp), %rcx
    movq %rcx, (%rbx)

    movq 0x8(%rsp), %rcx
    movq %rcx, 0x8(%rbx)

    movq 0x10(%rsp), %rcx
    movq %rcx, 0x10(%rbx)

    movq 0x18(%rsp), %rcx
    movq %rcx, 0x18(%rbx)

    movq 0x20(%rsp), %rcx
    movq %rcx, 0x20(%rbx)

    // setup stack frame
    andq $~0x7, %rsp
    movq %rsp, %rbp

    call _handle_irq_common

    // this should be unreachable

.align 0x10
idt_entry_start:


